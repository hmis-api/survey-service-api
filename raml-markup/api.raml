#%RAML 0.8
title:  Survey Service
version: 1.0.0
baseUri: https://www.hmislynk.com/survey-api/rest
mediaType: application/json
protocols:
  - HTTPS
schemas:
  - pickListGroup_id_json: !include Schemas/pickListGroup_id_json.json
  - pickListGroup_ids_json: !include Schemas/pickListGroup_ids_json.json
  - pickListGroup_json: !include Schemas/pickListGroup_json.json
  - id_pickListGroup_json: !include Schemas/id_pickListGroup_json.json
  - pickListValues_id_json: !include Schemas/pickListValues_id_json.json
  - pickListValues_ids_json: !include Schemas/pickListValues_ids_json.json
  - pickListValues_json: !include Schemas/pickListValues_json.json
  - id_pickListValues_json: !include Schemas/id_pickListValues_json.json
  - questionGroups_id_json: !include Schemas/questionGroups_id_json.json
  - questionGroup_ids_json: !include Schemas/questionGroup_ids_json.json
  - questionGroups_json: !include Schemas/questionGroups_json.json
  - id_questionGroups_json: !include Schemas/id_questionGroups_json.json
  - questions_id_json: !include Schemas/questions_id_json.json
  - questions_ids_json: !include Schemas/questions_ids_json.json
  - questions_json: !include Schemas/questions_json.json
  - surveySections_json: !include Schemas/surveySections_json.json
  - id_questions_json: !include Schemas/id_questions_json.json
  - response_id_json: !include Schemas/response_id_json.json
  - response_ids_json: !include Schemas/response_ids_json.json
  - response_json: !include Schemas/response_json.json
  - id_response_json: !include Schemas/id_response_json.json
  - surveys_id_json: !include Schemas/surveys_id_json.json
  - surveys_ids_json: !include Schemas/surveys_ids_json.json
  - surveys_json: !include Schemas/surveys_json.json
  - id_surveys_json: !include Schemas/id_surveys_json.json
  - surveySections_id_json: !include Schemas/surveySections_id_json.json
  - surveySection_ids_json: !include Schemas/surveySection_ids_json.json
  - id_surveySection_json: !include Schemas/id_surveySection_json.json
  - score_ids_json: !include Schemas/score_ids_json.json
  - section_question: !include Schemas/section_question.json
  - section_score : !include Schemas/section_score.json


resourceTypes:
  -  collection:
      description: "Operations performed on the set of all HMIS <<resourcePathName>> within the system, and for adding a new <<resourcePathName|!singularize>> to the set of <<resourcePathName>> "
      get:
        #securedBy: [oauth_2_0: { scopes: [ user ] } ]
        description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
        responses:
          200:
            description: OK – Everything is working.
            body:  
              application/json:
                schema: <<schema_ids_json>>
                example: <<schema_ids_json_example>>
          400: 
            description: Bad Request – The request was invalid or cannot be served.
          403: 
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404: 
            description: Not found – There is no resource behind the URI.
          500:
            description: 500 – Internal Server Error
      post:
        description: |
          Add a <<resourcePathName|!singularize>>
        body:
          application/json:
            schema: <<schema_json>>
            example: <<schema_json_example>>
        responses:
          201:
            description: OK - New resource has been created.
            body:
              application/json:
                schema: <<id_schema_json>>
                example: <<id_schema_json_example>>
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires user authentication.
          403:
            description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
          404: 
            description: Not found – There is no resource behind the URI.
          422:
            description: Unprocessable Entity - Request body is incorrect.
          500:
            description: 500 – Internal Server Error.
  -  member:
      get:
        description: Gets a <<resourcePathName|!singularize>> using a URI resource parameter/ID.
        responses:
          200:
            description: OK – Everything is working.
            body:
              application/json:
                schema: <<schema_id_json>>
                example: <<schema_id_json_example>>
          400:
            description: Bad Request – The request was invalid or cannot be served. 
          401:
            description: Unauthorized – The request requires an user authentication.
          403: 
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500: 
            description: Internal Server Error
      put:
        description: Updates a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
        body:
          application/json:
            schema: <<schema_json>>   
            example: <<schema_json_example>>    
        responses:
          200:
            description: OK – Everything is working.
          304:
            description: Not Modified – The client can use cached data.
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires a user.
          403:
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500:
            description: Internal Server Error.
      delete: 
        description: Deletes a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
        responses: 
          204:
            description: OK – The resource was successfully deleted.
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401: 
            description: Unauthorized – The request requires user authentication.
          403:
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500:
            description: Internal Server Error.
/picklistgroups:
  type: {
    collection: {
        id_schema_json: id_pickListGroup_json,
        schema_json:  pickListGroup_json,
        schema_ids_json: pickListGroup_ids_json,
        schema_ids_json_example : !include examples/pickListGroup_ids_json_example.json,
        schema_json_example: !include examples/pickListGroup_json_example.json,
        id_schema_json_example: !include examples/id_pickListGroup_json_example.json
    }
  }
  /{picklistgroupid}:
    uriParameters:
      picklistgroupid:
        displayName: PickListGroup Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  pickListGroup_json
        schema_id_json: pickListGroup_id_json
        schema_id_json_example : !include examples/pickListGroup_id_json_example.json
        schema_json_example: !include examples/pickListGroup_json_example.json
/picklistgroup/{picklistgroupid}/picklistvalues:
  type: {
    collection: {
        id_schema_json: id_pickListValues_json,
        schema_json:  pickListValues_json,
        schema_ids_json: pickListValues_ids_json,
        schema_ids_json_example : !include examples/pickListValues_ids_json_example.json,
        schema_json_example: !include examples/pickListValues_json_example.json,
        id_schema_json_example: !include examples/id_pickListValues_json_example.json
    }
  }
/picklistgroup/{picklistgroupid}/picklistvalues/{picklistvalueid}:
    uriParameters:
      picklistvalueid:
        displayName: PickListValues Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  pickListValues_json
        schema_id_json: pickListValues_id_json
        schema_id_json_example : !include examples/pickListValues_id_json_example.json
        schema_json_example: !include examples/pickListValues_json_example.json		
/questiongroups:
  type: {
    collection: {
        id_schema_json: id_questionGroups_json,
        schema_json:  questionGroups_json,
        schema_ids_json: questionGroup_ids_json,
        schema_ids_json_example : !include examples/questionGroup_ids_json_example.json,
        schema_json_example: !include examples/questionGroups_json_example.json,
        id_schema_json_example: !include examples/id_questionGroups_json_example.json
    }
  }
  /{questiongroupid}:
    uriParameters:
      questiongroupid:
        displayName: QuestionGroups Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  questionGroups_json
        schema_id_json: questionGroups_id_json
        schema_id_json_example : !include examples/questionGroups_id_json_example.json
        schema_json_example: !include examples/questionGroups_json_example.json
/questiongroups/{questiongroupid}/questions:
  get:
    description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
    responses:
      200:
        description: OK – Everything is working.
        body:  
          application/json:
            schema: questions_ids_json
            example: !include examples/questions_ids_json_example.json
      400: 
        description: Bad Request – The request was invalid or cannot be served.
      403: 
        description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
      404: 
        description: Not found – There is no resource behind the URI.
      500:
        description: 500 – Internal Server Error
  post:
    description: |
         The following operators can be used for "correctValueForAssessment" field.        
          1) Relational operators – equal (==, eq), not equal (!=, ne), less than (<, lt), less than or equal (<= , le), greater than (>, gt), and greater than or equal (>=, ge).
          2) Logical operators – and, or, and not (!).
          
          Question Data Type indicates the data type of the question and currently the following data types are allowed
          Allowed values for questionDataType : NUMBER , STRING , BOOLEAN
          
          Question Type indicates the type of UI control that is to be presented to the end us. 
          Allowed values for questionType: TEXT, CHECKBOX, DROPDOWN , RADIOBUTTON
          For questions of type RADIOBUTTON , CHECKBOX and DROPDOWN pickListGroupId is required  (example: "pickListGroupId": "37766271-7cb8-4c0b-9210-07dc7f82b871")

    body:
      application/json:
        schema: questions_json
        example: !include examples/questions_json_example.json
    responses:
      201:
        description: OK - New resource has been created.
        body:
          application/json:
            schema: id_questions_json
            example: !include examples/id_questions_json_example.json
      400:
        description: Bad Request – The request was invalid or cannot be served.
      401:
        description: Unauthorized – The request requires user authentication.
      403:
        description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
      404: 
        description: Not found – There is no resource behind the URI.
      422:
        description: Unprocessable Entity - Request body is incorrect.
      500:
        description: 500 – Internal Server Error.
/questiongroups/{questiongroupid}/questions/{questionid}:
    uriParameters:
      questionid:
        displayName: Questions Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  questions_json
        schema_id_json: questions_id_json
        schema_id_json_example : !include examples/questions_id_json_example.json
        schema_json_example: !include examples/questions_json_example.json
/surveys:
  type: {
    collection: {
        id_schema_json: id_surveys_json,
        schema_json:  surveys_json,
        schema_ids_json: surveys_ids_json,
        schema_ids_json_example : !include examples/surveys_ids_json_example.json,
        schema_json_example: !include examples/surveys_json_example.json,
        id_schema_json_example: !include examples/id_surveys_json_example.json
    }
  }
  /{surveyid}:
    uriParameters:
      surveyid:
        displayName: Surveys Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  surveys_json
        schema_id_json: surveys_id_json
        schema_id_json_example : !include examples/surveys_id_json_example.json
        schema_json_example: !include examples/surveys_json_example.json		
    /surveysections:
      type: {
        collection: {
            id_schema_json: id_surveySection_json,
            schema_json:  surveySections_json,
            schema_ids_json: surveySection_ids_json,
            schema_ids_json_example : !include examples/surveySection_ids_json_example.json,
            schema_json_example: !include examples/surveySections_json_example.json,
            id_schema_json_example: !include examples/id_surveySection_json_example.json
        }
      }
      /{sectionid}:
        uriParameters:
          sectionid:
            displayName: SurveySections Identifier
            type: string
            example: ADBC1111211111114111111111D1111V
        type:
          member:
            schema_json:  surveySections_json
            schema_id_json: surveySections_id_json
            schema_id_json_example : !include examples/surveySections_id_json_example.json
            schema_json_example: !include examples/surveySections_json_example.json
/surveys/{surveyid}/surveysections/{sectionid}/questions:
  post:
    description:  |
            Add question to a survey section.
    body:
      example: !include examples/section_question.json
      schema: section_question
    responses:
      200:
       description: Question added to survey
      400:
        description: Bad Request – The request was invalid or cannot be served.
      401:
        description: Unauthorized – The request requires user authentication.
      403:
        description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
      404: 
        description: Not found – There is no resource behind the URI.
      422:
        description: Unprocessable Entity - Request body is incorrect.
      500:
        description: 500 – Internal Server Error.
  get:
    description: | 
          Read all the question of selected survey section.
    responses:
      200:
        description: OK – Everything is working.
        body:  
          application/json:
            schema: questions_ids_json
            example: !include examples/questions_ids_json_example.json
      400: 
        description: Bad Request – The request was invalid or cannot be served.
      403: 
        description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
      404: 
        description: Not found – There is no resource behind the URI.
      500:
        description: 500 – Internal Server Error
/surveys/{surveyid}/surveysections/{sectionid}/questions/{questionid}:
  delete:
    description: Deletes a specific question from specified by section.
    responses:
      204:
        description: OK – The resource was successfully deleted.
      400:
        description: Bad Request – The request was invalid or cannot be served.
      401:
        description: Unauthorized – The request requires user authentication.
      403:
        description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
      404:
        description: Not found – There is no resource behind the URI.
      500:
        description: Internal Server Error.

/clients:
/clients/{clientid}:
/clients/{clientid}/surveys:
/clients/{clientid}/surveys/{surveyid}:
/clients/{clientid}/surveys/{surveyid}/responses:
    type: {
        collection: {
            id_schema_json: id_response_json,
            schema_json:  response_json,
            schema_ids_json: response_ids_json,
            schema_ids_json_example : !include examples/response_ids_json_example.json,
            schema_json_example: !include examples/response_json_example.json,
            id_schema_json_example: !include examples/id_response_json_example.json
        }
    }
/clients/{clientid}/surveys/{surveyid}/responses/{responseid}:
    uriParameters:
      responseid:
        displayName: Response Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  response_json
        schema_id_json: response_id_json
        schema_id_json_example : !include examples/response_id_json_example.json
        schema_json_example: !include examples/response_json_example.json
/clients/{clientid}/surveys/{surveyid}/sections/{sectionid}/scores:
  post:
    description: To insert sctore for a section
    body:
      example: |
                  {
                     "sectionScore":{
                       "sectionScore":30
                     }
                  }                    
      schema: |
                 {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "sectionScore": {
                      "type": "object",
                      "properties": {
                        "sectionScore": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "sectionScore"
                      ]
                    }
                  },
                  "required": [
                    "sectionScore"
                  ]
                  } 
    responses:  
        200:
          body:
            example: !include examples/section_score_example.json
            schema : section_score

  get:
    description: Read a section score.
    responses:
      200:
        body:
          example: !include examples/section_score_example.json
          schema : section_score
  put:
    description: Recalcute the score specified section
  delete:
    description: Delete score of a specfied section
/clients/{clientid}/surveys/{surveyid}/scores:
  get:
    description: Read a section score.
    responses:
      200:
        body:
          example: !include examples/score_ids_json_example.json
          schema : score_ids_json
  put:
    description: Recalcute the score specified section
  delete:
    description: Delete score of a specfied section    