openapi: 3.0.0
info:
  title: Survey Service
  version: 3.1.2
  description: |
       **Note :**
              Please note that the partial updates are supported via PUT APIs. However, Note that If "null" value is passed for any element, in the PUT request body, it will be ignored. An empty string value should be sent (instead of "null" value) for the elements that need to be updated with NULL values.
servers:
  - url: 'https://www.hslynk.com/survey-api/rest'
paths:
  /picklistgroups:
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    pickListGroups:
                      pagination:
                        from: 0
                        returned: 3
                        total: 20
                        maximum: 30
                        sort: {}
                      pickListGroups:
                        - pickListGroupId: f2ef5e72-5549-4dc8-8885-8f11c284d7e9
                          pickListGroupName: TestName
                        - pickListGroupId: 748decb7-fc9c-4cf2-82fe-2859c5f9c597
                          pickListGroupName: TestName
                        - pickListGroupId: 7283aa39-697c-4014-8008-99e9e725627d
                          pickListGroupName: TestName
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
      description: >-
        Searches for picklistgroup.  Returns a list of picklistgroup ids, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_picklistgroups
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                    pickListGroup:
                      pickListGroupId: 45852728-1543-4294-8d69-0e7e252a7932
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
      description: |
        Add a picklistgroup
      operationId: POST_picklistgroups
      requestBody:
        content:
          application/json:
            schema:
              example:
                  pickListGroup:
                    pickListGroupName: TestPickListGroup
        required: true
  '/picklistgroups/{picklistgroupid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    pickListGroup:
                      pickListGroupId: 66a0181b-26d7-4335-807e-04b73e196d86
                      pickListGroupName: TestName
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a picklistgroup using a URI resource parameter/ID.
      operationId: GET_picklistgroups-picklistgroupid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific picklistgroup specified by the URI resource
        parameter/ID.
      operationId: PUT_picklistgroups-picklistgroupid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  pickListGroup:
                    pickListGroupName: TestNewPicklistGroup
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific picklistgroup specified by the URI resource
        parameter/ID.
      operationId: DELETE_picklistgroups-picklistgroupid
    parameters:
      - name: picklistgroupid
        in: path
        required: true
        schema:
          type: string
        description: PickListGroup Identifier
  '/picklistgroup/{picklistgroupid}/picklistvalues':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                  pickList:
                    pickList:
                      - pickListValueId: eff61efc-edcf-44d1-989b-452463d17db2
                        pickListValueCode: TestCode
                        valueText: Test
                      - pickListValueId: 7b620bb1-007c-494a-aa3a-a5ff249f94d5
                        pickListValueCode: TestCode
                        valueText: Test
                      - pickListValueId: ef93bedd-5cae-4c99-b1da-34fb2580e859
                        pickListValueCode: TestCode
                        valueText: Test
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
      description: >-
        Searches for picklistvalue.  Returns a list of picklistvalue ids, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_picklistgroup-picklistgroupid-picklistvalues
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                    pickListValue:
                      pickListValueId: eff61efc-edcf-44d1-989b-452463d17db2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
      description: |
        Add a picklistvalue
      operationId: POST_picklistgroup-picklistgroupid-picklistvalues
      requestBody:
        content:
          application/json:
            schema:
              example:
                  pickListValues:
                    pickListValues:
                      - pickListValueCode: TestCode1
                        valueText: Test1
                      - pickListValueCode: TestCode2
                        valueText: Test2
                      - pickListValueCode: TestCode3
                        valueText: Test3
        required: true
    parameters:
      - name: picklistgroupid
        in: path
        required: true
        schema:
          type: string
  '/picklistgroup/{picklistgroupid}/picklistvalues/{picklistvalueid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    pickListValue:
                      pickListValueId: 4223e5cf-7f3e-46eb-aa36-5b2174ee62e9
                      pickListValueCode: TestCode
                      valueText: Test
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a picklistvalue using a URI resource parameter/ID.
      operationId: GET_picklistgroup-picklistgroupid-picklistvalues-picklistvalueid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific picklistvalue specified by the URI resource
        parameter/ID.
      operationId: PUT_picklistgroup-picklistgroupid-picklistvalues-picklistvalueid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  pickListValues:
                    pickListValues:
                      - pickListValueCode: TestCode1
                        valueText: Test1
                      - pickListValueCode: TestCode2
                        valueText: Test2
                      - pickListValueCode: TestCode3
                        valueText: Test3
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific picklistvalue specified by the URI resource
        parameter/ID.
      operationId: DELETE_picklistgroup-picklistgroupid-picklistvalues-picklistvalueid
    parameters:
      - name: picklistgroupid
        in: path
        required: true
        schema:
          type: string
      - name: picklistvalueid
        in: path
        required: true
        schema:
          type: string
        description: PickListValues Identifier
  /questiongroups:
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    questionGroups:
                      pagination:
                        from: 0
                        returned: 16
                        total: 16
                        maximum: 30
                        sort: {}
                      questionGroups:
                        - questionGroupId: 2680ce52-9357-461a-9f66-7714390358bc
                          questionGroupName: questionGroupName1
                        - questionGroupId: 742e7ca8-4c97-4c2d-9438-3e872ed2571f
                          questionGroupName: questionGroupName2
                        - questionGroupId: 012135a7-8a21-4098-9cd9-568559d45e5a
                          questionGroupName: questionGroupName3
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
      description: >-
        Searches for questiongroup.  Returns a list of questiongroup ids, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_questiongroups
    post:
      responses:
        '200':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  questionGroup:
                    questionIGroupId: cc6418c3-5b8f-4d68-83c4-938bea625912
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
      description: |
        Add a questiongroup
      operationId: POST_questiongroups
      requestBody:
        content:
          application/json:
            schema:
              example:
                  questionGroup:
                    questionGroupName: questionGroupName1
        required: true
  '/questiongroups/{questiongroupid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    questionGroup:
                      questionGroupId: de6de9cb-ee05-4eea-84b3-d368370b9180
                      questionGroupName: questionGroupName1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a questiongroup using a URI resource parameter/ID.
      operationId: GET_questiongroups-questiongroupid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific questiongroup specified by the URI resource
        parameter/ID.
      operationId: PUT_questiongroups-questiongroupid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  questionGroup:
                    questionGroupName: questionGroupName1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific questiongroup specified by the URI resource
        parameter/ID.
      operationId: DELETE_questiongroups-questiongroupid
    parameters:
      - name: questiongroupid
        in: path
        required: true
        schema:
          type: string
        description: QuestionGroups Identifier
  '/v2/questiongroups/{questiongroupid}/questions':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                  questions:
                    pagination:
                      from: 0
                      returned: 2
                      total: 2
                      maximum: 30
                      sort: {}
                    questions:
                    - questionId: 23588047-2596-469b-841c-94fd4260cf30
                      questionDescription: Times Homeless Past Three Years
                      displayText: Times Homeless Past Three Years
                      questionDataType: STRING
                      questionType: DROPDOWN
                      copyQuestionId: false
                      hudQuestion: true
                      locked: false
                      questionWeight: 0
                      questionGroupId: 10c0415d-85c0-4dbc-a0ec-562fb57245e3
                      definition: '"{"questionType": "DROPDOWN","title": "Living Situation","options":
                        {}}"'
                      visibility: true
                      category: question category
                      subcategory: question sub category
                      updateUriTemplate: "/v2017/clients/{clientid}/enrollments/{enrollmentid}"
                      uriObjectField: enrollment.timesHomelessPastThreeYears
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
      description: >-
        Searches for <<resourcePathName|!singularize>>.  Returns a list of
        <<resourcePathName|!singularize>> ids, based on the query parameters
        sent.  The query parameters are cumulative, so each additional query
        parameter narrows the search down further.
      operationId: GET_v2-questiongroups-questiongroupid-questions
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
             schema:
                example:
                  question:
                    questionId: 23588047-2596-469b-841c-94fd4260cf30
                    questionDescription: Times Homeless Past Three Years
                    displayText: Times Homeless Past Three Years
                    questionDataType: STRING
                    questionType: DROPDOWN
                    copyQuestionId: false
                    hudQuestion: true
                    locked: false
                    questionWeight: 0
                    questionGroupId: 10c0415d-85c0-4dbc-a0ec-562fb57245e3
                    definition: '"{"questionType": "DROPDOWN","title": "Living Situation","options":
                      {}}"'
                    visibility: true
                    category: question category
                    subcategory: question sub category
                    updateUriTemplate: "/v2017/clients/{clientid}/enrollments/{enrollmentid}"
                    uriObjectField: enrollment.timesHomelessPastThreeYears
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
      description: >
        The following operators can be used for "correctValueForAssessment"
        field.
          1) Relational operators – equal (==, eq), not equal (!=, ne), less than (<, lt), less than or equal (<= , le), greater than (>, gt), and greater than or equal (>=, ge).
          2) Logical operators – and, or, and not (!).
          Question Data Type indicates the data type of the question and currently the following data types are allowed
          Allowed values for questionDataType : NUMBER , STRING , BOOLEAN
          Question Type indicates the type of UI control that is to be presented to the end us.
          Allowed values for questionType: TEXT, CHECKBOX, DROPDOWN , RADIOBUTTON
          For questions of type RADIOBUTTON , CHECKBOX and DROPDOWN pickListValues is required - Note that pickListValues should be a stringfied json.
          Please refer the following for more details on stringying JSON
          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
      operationId: POST_v2-questiongroups-questiongroupid-questions
      requestBody:
        content:
          application/json:
            schema:          
              example:
                question:
                  questionId: 23588047-2596-469b-841c-94fd4260cf30
                  questionDescription: Times Homeless Past Three Years
                  displayText: Times Homeless Past Three Years
                  questionDataType: STRING
                  questionType: DROPDOWN
                  copyQuestionId: false
                  hudQuestion: true
                  locked: false
                  questionWeight: 0
                  questionGroupId: 10c0415d-85c0-4dbc-a0ec-562fb57245e3
                  definition: '"{"questionType": "DROPDOWN","title": "Living Situation","options":
                    {}}"'
                  visibility: true
                  category: question category
                  subcategory: question sub category
                  updateUriTemplate: "/v2017/clients/{clientid}/enrollments/{enrollmentid}"
                  uriObjectField: enrollment.timesHomelessPastThreeYears
        required: true
    parameters:
      - name: questiongroupid
        in: path
        required: true
        schema:
          type: string
  '/v2/questiongroups/{questiongroupid}/questions/{questionid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
              application/json:
                schema:
                  example:
                    question:
                      questionId: 23588047-2596-469b-841c-94fd4260cf30
                      questionDescription: Times Homeless Past Three Years
                      displayText: Times Homeless Past Three Years
                      questionDataType: STRING
                      questionType: DROPDOWN
                      copyQuestionId: false
                      hudQuestion: true
                      locked: false
                      questionWeight: 0
                      questionGroupId: 10c0415d-85c0-4dbc-a0ec-562fb57245e3
                      definition: '"{"questionType": "DROPDOWN","title": "Living Situation","options":
                        {}}"'
                      visibility: true
                      category: question category
                      subcategory: question sub category
                      updateUriTemplate: "/v2017/clients/{clientid}/enrollments/{enrollmentid}"
                      uriObjectField: enrollment.timesHomelessPastThreeYears
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a question using a URI resource parameter/ID.
      operationId: GET_v2-questiongroups-questiongroupid-questions-questionid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific question specified by the URI resource parameter/ID.
      operationId: PUT_v2-questiongroups-questiongroupid-questions-questionid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  question:
                    displayText: Question title
                    questionDescription: additional description to display
                    questionType: choice|text|number|date|grid
                    definition: stringfied JSON
                    visibility: true
                    category: question category
                    subcategory: question sub category
                    pickListValues: '  { "1" : "Full address reported" } ,  { "2" : "Incomplete or estimated address reported" }'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific question specified by the URI resource parameter/ID.
      operationId: DELETE_v2-questiongroups-questiongroupid-questions-questionid
    parameters:
      - name: questiongroupid
        in: path
        required: true
        schema:
          type: string
      - name: questionid
        in: path
        required: true
        schema:
          type: string
        description: Questions Identifier
  /v2/surveys:
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    surveys:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      surveys:
                        - surveyId: bff91ee3-4e88-4953-8f67-e6c549fc2d01
                          surveyTitle: dsvnjkvjnds
                          surveyOwner: asssa
                          tagValue: vfvnjkj
                          locked: true
                          copySurveyId: false
                          surveyDefinition: ' { " title " : " Survey Definition " } '
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
      description: >-
        Searches for survey.  Returns a list of survey ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_v2-surveys
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                    survey:
                      surveyId: fd628990-623a-42c6-8df2-f74a4c6d2c77
                      locked: false
                      copySurveyId: false
                      surveyDefinition: ' { " title " : " Survey Definition " } '
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
      description: |
        Add a survey
      operationId: POST_v2-surveys
      requestBody:
        content:
          application/json:
            schema:
              example:
                  survey:
                    surveyTitle: VI-SPDAT Survey
                    surveyOwner: eric@hmislynk.com
                    tagValue: SINGLE_ADULT
                    locked: true
                    copySurveyId: false
                    surveyDefinition: ' { " title " : " Survey Definition " } '
        required: true
  '/v2/surveys/{surveyid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    survey:
                      surveyId: 4ff874ec-88ef-46bb-93d6-66be064d5dd2
                      surveyTitle: dsvnjkvjnds
                      surveyOwner: asssa
                      tagValue: vfvnjkj
                      locked: true
                      copySurveyId: false
                      surveyDefinition: ' { " title " : " Survey Definition " } '
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a survey using a URI resource parameter/ID.
      operationId: GET_v2-surveys-surveyid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific survey specified by the URI resource parameter/ID.
      operationId: PUT_v2-surveys-surveyid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  survey:
                    surveyTitle: VI-SPDAT Survey
                    surveyOwner: eric@hmislynk.com
                    tagValue: SINGLE_ADULT
                    locked: true
                    copySurveyId: false
                    surveyDefinition: ' { " title " : " Survey Definition " } '
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific survey specified by the URI resource parameter/ID.
      operationId: DELETE_v2-surveys-surveyid
    parameters:
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
        description: Surveys Identifier
  '/surveys/{surveyid}/surveysections':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    surveySections:
                      pagination:
                        from: 0
                        returned: 2
                        total: 16
                        maximum: 30
                        sort: {}
                      surveySections:
                        - surveySectionId: 4f0927b8-b5cb-4714-8f64-d417c07862d1
                          sectionText: Section1
                          sectionDetail: Section1
                          sectionWeight: 20
                          order: 1
                        - surveySectionId: 30f04be7-08d1-4c82-8c5f-0dc31f3e2f7d
                          sectionText: Section 2
                          sectionDetail: Section 2
                          sectionWeight: 30
                          order: 2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
      description: >-
        Searches for surveysection.  Returns a list of surveysection ids, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_surveys-surveyid-surveysections
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                    surveySection:
                      surveySectionId: 8213b48a-1504-4adf-a58f-2b557a1e2b9e
                      sectionWeight: 0
                      order: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
      description: |
        Add a surveysection
      operationId: POST_surveys-surveyid-surveysections
      requestBody:
        content:
          application/json:
            schema:
              example:
                  surveySection:
                    sectionText: Section1
                    sectionDetail: Section1
                    sectionWeight: 20
                    order: 1
        required: true
    parameters:
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
  '/surveys/{surveyid}/surveysections/{sectionid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    surveySection:
                      surveySectionId: 6db77e4c-39d9-44e1-bcfc-139697ae69d1
                      sectionText: section1
                      sectionDetail: section1
                      sectionWeight: 20
                      order: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a surveysection using a URI resource parameter/ID.
      operationId: GET_surveys-surveyid-surveysections-sectionid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific surveysection specified by the URI resource
        parameter/ID.
      operationId: PUT_surveys-surveyid-surveysections-sectionid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  surveySection:
                    sectionText: Section1
                    sectionDetail: Section1
                    sectionWeight: 20
                    order: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific surveysection specified by the URI resource
        parameter/ID.
      operationId: DELETE_surveys-surveyid-surveysections-sectionid
    parameters:
      - name: sectionid
        in: path
        required: true
        schema:
          type: string
        description: SurveySections Identifier
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
  '/surveys/{surveyid}/surveysections/{sectionid}/questions':
    post:
      responses:
        '200':
          description: Question added to survey
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
      description: |
        Add question to a survey section.
      operationId: POST_surveys-surveyid-surveysections-sectionid-questions
      requestBody:
        content:
          application/json:
            schema:
              example:
                  sectionQuestionMappings:
                    sectionQuestionMappings:
                      - question:
                          questionId: df1b45ef-560a-4893-be34-9149c2236275
        required: true
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    questions:
                      pagination:
                        from: 0
                        returned: 16
                        total: 16
                        maximum: 30
                        sort: {}
                      questions:
                        - questionId: 4bd3d3e1-a70a-4e66-89d9-43fd23f5f3c8
                          questionDescription: About question 1
                          displayText: Question 1
                          questionDataType: BOOLEAN
                          questionType: TEXT
                          correctValueForAssessment: ergreg
                          copyQuestionId: true
                          hudQuestion: false
                          locked: false
                          questionWeight: 10
                          pickListGroupId: 66a0181b-26d7-4335-807e-04b73e196d86
                        - questionId: aeaed6cd-dbe3-4b40-951a-85d7abf410d2
                          questionDescription: About question 2
                          displayText: Question 2
                          questionDataType: STRING
                          questionType: CHECKBOX
                          correctValueForAssessment: true
                          copyQuestionId: true
                          hudQuestion: false
                          locked: false
                          questionWeight: 5
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
      description: |
        Read all the question of selected survey section.
      operationId: GET_surveys-surveyid-surveysections-sectionid-questions
    parameters:
      - name: sectionid
        in: path
        required: true
        schema:
          type: string
        description: SurveySections Identifier
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
  '/surveys/{surveyid}/surveysections/{sectionid}/questions/{questionid}':
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific question from specified by section.
      operationId: DELETE_surveys-surveyid-surveysections-sectionid-questions-questionid
    parameters:
      - name: questionid
        in: path
        required: true
        schema:
          type: string
      - name: sectionid
        in: path
        required: true
        schema:
          type: string
        description: SurveySections Identifier
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
  '/clients/{clientid}/surveys/{surveyid}/submissions/{submissionid}':
    put:
      responses:
        '200':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: SUBMISSION_DETAILS_NOT_FOUND
                      message: >-
                        Submission Details not found :
                        e9a4a447-833f-4c29-a3b6-f966a0a753aa
      description: |
        To update responses data of submission
      operationId: PUT_v3-clients-dedupclientid-surveys-surveyid-submissions-submissionid
      requestBody:
        content:
          application/json:
            schema:
              example:
                responses:
                  responses:
                    - responseId: b64f6a1f-b72e-4c61-b3bb-7bcef5b877f5
                      questionId: a4a8baf6-363a-4be8-8610-2cdb6593316f
                      responseText: example response
                      sectionId: b5b8cdg8-363a-4be8-8610-2cdb6593316f
                      appId: app1
                      effectiveDate: '10-02-2017 03:12:00.000'
                    - responseId: 2741f430-bc37-42a9-abc4-f2bdf1339d6c
                      questionId: b5b8cdg8-363a-4be8-8610-2cdb6593316f
                      responseText: example response
                      sectionId: a4a8baf6-363a-4be8-8610-2cdb6593316f
                      appId: app2
                      effectiveDate: '10-02-2017 03:12:00.000'
        required: true
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  responses:
                    pagination:
                      from: 0
                      returned: 4
                      total: 4
                      maximum: 30
                      sort: {}
                    responses:
                      - responseId: b64f6a1f-b72e-4c61-b3bb-7bcef5b877f5
                        responseText: example response
                        questionScore: 0
                        appId: app1
                        sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                        questionId: f58103d8-f292-438d-af4b-b63c15041477
                        clientId: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                        dedupClientId: 74520590-3eb3-11e7-85e4-06c37be0e663
                        surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                        refused: true
                        submissionId: 5e40fe46-0c6b-4b45-90be-7179062e55c5
                        client:
                          id: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                          firstName: Ryan
                          middleName: ''
                          lastName: Peterson
                          dob: 340009200000
                      - responseId: 2741f430-bc37-42a9-abc4-f2bdf1339d6c
                        responseText: '{ "test": "example response" }'
                        questionScore: 0
                        appId: app2
                        sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                        questionId: f58103d8-f292-438d-af4b-b63c15041477
                        clientId: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                        dedupClientId: 74520590-3eb3-11e7-85e4-06c37be0e663
                        surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                        refused: true
                        submissionId: 5e40fe46-0c6b-4b45-90be-7179062e55c5
                        client:
                          id: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                          firstName: Ryan
                          middleName: ''
                          lastName: Peterson
                          dob: 340009200000
                      - responseId: f7bb4b7e-2384-4a6a-bcf8-1739877f0d94
                        responseText: example response
                        questionScore: 0
                        appId: app1
                        sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                        questionId: f58103d8-f292-438d-af4b-b63c15041477
                        clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                        dedupClientId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                        surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                        refused: true
                        submissionId: 8eb99dd0-cd59-48b8-b08d-1ecd71d7a1f3
                        client:
                          id: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                          firstName: Przemyslaw
                          middleName: Piotr
                          lastName: Gorecki
                          dob: 315532800000
                          phoneNumber: undefined
                          emailAddress: przemyslaw@toptal.com
                      - responseId: f152d995-3a79-4816-9e00-241075f3544c
                        responseText: '{ "test": "example response" }'
                        questionScore: 0
                        appId: app2
                        sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                        questionId: f58103d8-f292-438d-af4b-b63c15041477
                        clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                        dedupClientId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                        surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                        refused: true
                        submissionId: 8eb99dd0-cd59-48b8-b08d-1ecd71d7a1f3
                        client:
                          id: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                          firstName: Przemyslaw
                          middleName: Piotr
                          lastName: Gorecki
                          dob: 315532800000
                          phoneNumber: undefined
                          emailAddress: przemyslaw@toptal.com
        '404':
          description: ''
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: SUBMISSION_DETAILS_NOT_FOUND
                      message: >-
                        Submission Details not found :
                        e9a4a447-833f-4c29-a3b6-f966a0a753aa
      description: |
        To get responses of a submission.
      operationId: GET_v3-clients-dedupclientid-surveys-surveyid-submissions-submissionid
    delete:
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: SUBMISSION_DETAILS_NOT_FOUND
                      message: >-
                        Submission Details not found :
                        e9a4a447-833f-4c29-a3b6-f966a0a753aa
      description: |
        To delete responses of a submission.
      operationId: >-
        DELETE_v3-clients-dedupclientid-surveys-surveyid-submissions-submissionid
    parameters:
      - name: submissionid
        in: path
        required: true
        schema:
          type: string
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
      - name: clientid
        in: path
        required: true
        schema:
          type: string
  '/v3/clients/{dedupclientid}/surveys/{surveyid}/responses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    responses:
                      pagination:
                        from: 0
                        returned: 4
                        total: 4
                        maximum: 30
                        sort: {}
                      responses:
                        - responseId: b64f6a1f-b72e-4c61-b3bb-7bcef5b877f5
                          responseText: example response
                          questionScore: 0
                          appId: app1
                          sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                          questionId: f58103d8-f292-438d-af4b-b63c15041477
                          clientId: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                          dedupClientId: 74520590-3eb3-11e7-85e4-06c37be0e663
                          surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                          refused: true
                          submissionId: 5e40fe46-0c6b-4b45-90be-7179062e55c5
                          client:
                            id: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                            firstName: Ryan
                            middleName: ''
                            lastName: Peterson
                            dob: 340009200000
                        - responseId: 2741f430-bc37-42a9-abc4-f2bdf1339d6c
                          responseText: '{ "test": "example response" }'
                          questionScore: 0
                          appId: app2
                          sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                          questionId: f58103d8-f292-438d-af4b-b63c15041477
                          clientId: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                          dedupClientId: 74520590-3eb3-11e7-85e4-06c37be0e663
                          surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                          refused: true
                          submissionId: 5e40fe46-0c6b-4b45-90be-7179062e55c5
                          client:
                            id: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                            firstName: Ryan
                            middleName: ''
                            lastName: Peterson
                            dob: 340009200000
                        - responseId: f7bb4b7e-2384-4a6a-bcf8-1739877f0d94
                          responseText: example response
                          questionScore: 0
                          appId: app1
                          sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                          questionId: f58103d8-f292-438d-af4b-b63c15041477
                          clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                          dedupClientId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                          surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                          refused: true
                          submissionId: 8eb99dd0-cd59-48b8-b08d-1ecd71d7a1f3
                          client:
                            id: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                            firstName: Przemyslaw
                            middleName: Piotr
                            lastName: Gorecki
                            dob: 315532800000
                            phoneNumber: undefined
                            emailAddress: przemyslaw@toptal.com
                        - responseId: f152d995-3a79-4816-9e00-241075f3544c
                          responseText: '{ "test": "example response" }'
                          questionScore: 0
                          appId: app2
                          sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                          questionId: f58103d8-f292-438d-af4b-b63c15041477
                          clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                          dedupClientId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                          surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                          refused: true
                          submissionId: 8eb99dd0-cd59-48b8-b08d-1ecd71d7a1f3
                          client:
                            id: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                            firstName: Przemyslaw
                            middleName: Piotr
                            lastName: Gorecki
                            dob: 315532800000
                            phoneNumber: undefined
                            emailAddress: przemyslaw@toptal.com
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
      description: >-
        Searches for response.  Returns a list of response ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_v3-clients-dedupclientid-surveys-surveyid-responses
    post:
      responses:
        '200':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  response:
                    responseId: f7bb4b7e-2384-4a6a-bcf8-1739877f0d94
                    responseText: example response
                    questionScore: 0
                    appId: app1
                    sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                    questionId: f58103d8-f292-438d-af4b-b63c15041477
                    clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                    dedupClientId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                    surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                    refused: true
                    submissionId: 8eb99dd0-cd59-48b8-b08d-1ecd71d7a1f3
                    client:
                      id: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                      firstName: Przemyslaw
                      middleName: Piotr
                      lastName: Gorecki
                      dob: 315532800000
                      phoneNumber: undefined
                      emailAddress: przemyslaw@toptal.com
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
      description: |
        Add a response
      operationId: POST_v3-clients-dedupclientid-surveys-surveyid-responses
      requestBody:
        content:
          application/json:
            schema:
              example:
                responses:
                  responses:
                    - questionId: a4a8baf6-363a-4be8-8610-2cdb6593316f
                      responseText: example response
                      sectionId: b5b8cdg8-363a-4be8-8610-2cdb6593316f
                      appId: app1
                      effectiveDate: '10-02-2017 03:12:00.000'
                    - questionId: b5b8cdg8-363a-4be8-8610-2cdb6593316f
                      responseText: example response
                      sectionId: a4a8baf6-363a-4be8-8610-2cdb6593316f
                      appId: app2
                      effectiveDate: '10-02-2017 03:12:00.000'

        required: true
    parameters:
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
      - name: dedupclientid
        in: path
        required: true
        schema:
          type: string
  '/v3/clients/{dedupclientid}/surveys/{surveyid}/responses/{responseid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    response:
                      responseId: e9a4a447-833f-4c29-a3b6-f966a0a753aa
                      responseText: csacsc
                      questionScore: 123456
                      effectiveDate: '10-02-2017 03:12:00.000'
                      submissionId: e9a4a447-833f-4c29-a3b6-f966a0a753aa
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a response using a URI resource parameter/ID.
      operationId: GET_v3-clients-dedupclientid-surveys-surveyid-responses-responseid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific response specified by the URI resource parameter/ID.
      operationId: PUT_v3-clients-dedupclientid-surveys-surveyid-responses-responseid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  response:
                    responseId: e9a4a447-833f-4c29-a3b6-f966a0a753aa
                    responseText: csacsc
                    questionScore: 123456
                    effectiveDate: '10-02-2017 03:12:00.000'
                    submissionId: e9a4a447-833f-4c29-a3b6-f966a0a753aa
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific response specified by the URI resource parameter/ID.
      operationId: DELETE_v3-clients-dedupclientid-surveys-surveyid-responses-responseid
    parameters:
      - name: responseid
        in: path
        required: true
        schema:
          type: string
        description: Response Identifier
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
      - name: dedupclientid
        in: path
        required: true
        schema:
          type: string
  '/v3/clients/{dedupclientid}/surveys/{surveyid}/sections/{sectionid}/scores':
    post:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                    sectionScore:
                      sectionScoreId: d7f79550-fb2b-4af8-b011-24a6d5e99aa4
                      sectionId: 5f45c297-1eac-44d2-8571-349f7ae28677
                      surveyId: faa07de1-1421-4a63-b606-3bd4cba91699
                      clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                      clientDedupId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                      sectionScore: 10
      description: To insert sctore for a section
      operationId: POST_v3-clients-dedupclientid-surveys-surveyid-sections-sectionid-scores
      requestBody:
        content:
          application/json:
            example:
              sectionScore:
                sectionScore: 30
            schema:
              required:
                - sectionScore
              type: object
              properties:
                sectionScore:
                  required:
                    - sectionScore
                  type: object
                  properties:
                    sectionScore:
                      type: integer
        required: true
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                    sectionScore:
                      sectionScoreId: d7f79550-fb2b-4af8-b011-24a6d5e99aa4
                      sectionId: 5f45c297-1eac-44d2-8571-349f7ae28677
                      surveyId: faa07de1-1421-4a63-b606-3bd4cba91699
                      clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                      clientDedupId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                      sectionScore: 10
      description: Read a section score.
      operationId: GET_v3-clients-dedupclientid-surveys-surveyid-sections-sectionid-scores
    put:
      responses:
        default:
          description: ''
      description: Recalcute the score specified section
      operationId: PUT_v3-clients-dedupclientid-surveys-surveyid-sections-sectionid-scores
    delete:
      responses:
        default:
          description: ''
      description: Delete score of a specfied section
      operationId: >-
        DELETE_v3-clients-dedupclientid-surveys-surveyid-sections-sectionid-scores
    parameters:
      - name: sectionid
        in: path
        required: true
        schema:
          type: string
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
      - name: dedupclientid
        in: path
        required: true
        schema:
          type: string
  '/v3/clients/{dedupclientid}/surveys/{surveyid}/scores':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                    sectionScores:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      sectionScores:
                        - sectionScoreId: d7f79550-fb2b-4af8-b011-24a6d5e99aa4
                          sectionId: 5f45c297-1eac-44d2-8571-349f7ae28677
                          surveyId: faa07de1-1421-4a63-b606-3bd4cba91699
                          clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                          clientDedupId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                          sectionScore: 10
      description: Read a section score.
      operationId: GET_v3-clients-dedupclientid-surveys-surveyid-scores
    put:
      responses:
        default:
          description: ''
      description: Recalcute the score specified section
      operationId: PUT_v3-clients-dedupclientid-surveys-surveyid-scores
    delete:
      responses:
        default:
          description: ''
      description: Delete score of a specfied section
      operationId: DELETE_v3-clients-dedupclientid-surveys-surveyid-scores
    parameters:
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
      - name: dedupclientid
        in: path
        required: true
        schema:
          type: string
  '/v3/clients/{dedupclientid}/surveys/{surveyid}/submissions/{submissionid}':
    put:
      responses:
        '200':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: SUBMISSION_DETAILS_NOT_FOUND
                      message: >-
                        Submission Details not found :
                        e9a4a447-833f-4c29-a3b6-f966a0a753aa
      description: |
        To update responses data of submission
      operationId: PUT_v3-clients-dedupclientid-surveys-surveyid-submission-submissionid
      requestBody:
        content:
          application/json:
            schema:
              example:
                responses:
                  responses:
                    - questionId: a4a8baf6-363a-4be8-8610-2cdb6593316f
                      responseId: b64f6a1f-b72e-4c61-b3bb-7bcef5b877f5
                      responseText: example response
                      sectionId: b5b8cdg8-363a-4be8-8610-2cdb6593316f
                      appId: app1
                      effectiveDate: '10-02-2017 03:12:00.000'
                    - questionId: b5b8cdg8-363a-4be8-8610-2cdb6593316f
                      responseId: 2741f430-bc37-42a9-abc4-f2bdf1339d6c
                      responseText: example response
                      sectionId: a4a8baf6-363a-4be8-8610-2cdb6593316f
                      appId: app2
                      effectiveDate: '10-02-2017 03:12:00.000'
        required: true
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  responses:
                    pagination:
                      from: 0
                      returned: 4
                      total: 4
                      maximum: 30
                      sort: {}
                    responses:
                      - responseId: b64f6a1f-b72e-4c61-b3bb-7bcef5b877f5
                        responseText: example response
                        questionScore: 0
                        appId: app1
                        sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                        questionId: f58103d8-f292-438d-af4b-b63c15041477
                        clientId: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                        dedupClientId: 74520590-3eb3-11e7-85e4-06c37be0e663
                        surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                        refused: true
                        submissionId: 5e40fe46-0c6b-4b45-90be-7179062e55c5
                        client:
                          id: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                          firstName: Ryan
                          middleName: ''
                          lastName: Peterson
                          dob: 340009200000
                      - responseId: 2741f430-bc37-42a9-abc4-f2bdf1339d6c
                        responseText: '{ "test": "example response" }'
                        questionScore: 0
                        appId: app2
                        sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                        questionId: f58103d8-f292-438d-af4b-b63c15041477
                        clientId: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                        dedupClientId: 74520590-3eb3-11e7-85e4-06c37be0e663
                        surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                        refused: true
                        submissionId: 5e40fe46-0c6b-4b45-90be-7179062e55c5
                        client:
                          id: df2f6b58-e29f-4845-bd20-58a5ec0b2529
                          firstName: Ryan
                          middleName: ''
                          lastName: Peterson
                          dob: 340009200000
                      - responseId: f7bb4b7e-2384-4a6a-bcf8-1739877f0d94
                        responseText: example response
                        questionScore: 0
                        appId: app1
                        sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                        questionId: f58103d8-f292-438d-af4b-b63c15041477
                        clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                        dedupClientId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                        surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                        refused: true
                        submissionId: 8eb99dd0-cd59-48b8-b08d-1ecd71d7a1f3
                        client:
                          id: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                          firstName: Przemyslaw
                          middleName: Piotr
                          lastName: Gorecki
                          dob: 315532800000
                          phoneNumber: undefined
                          emailAddress: przemyslaw@toptal.com
                      - responseId: f152d995-3a79-4816-9e00-241075f3544c
                        responseText: '{ "test": "example response" }'
                        questionScore: 0
                        appId: app2
                        sectionId: 0200e208-3f0e-4504-8bcf-99f6981c6c1e
                        questionId: f58103d8-f292-438d-af4b-b63c15041477
                        clientId: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                        dedupClientId: 82bf30b0-9a18-11e7-9920-02fe61f7863e
                        surveyId: d26e11fc-1bc3-4677-9c55-347b4d46b8ab
                        refused: true
                        submissionId: 8eb99dd0-cd59-48b8-b08d-1ecd71d7a1f3
                        client:
                          id: 08bd3d50-cb87-41ac-8b64-b3dc3853c411
                          firstName: Przemyslaw
                          middleName: Piotr
                          lastName: Gorecki
                          dob: 315532800000
                          phoneNumber: undefined
                          emailAddress: przemyslaw@toptal.com
        '404':
          description: ''
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: SUBMISSION_DETAILS_NOT_FOUND
                      message: >-
                        Submission Details not found :
                        e9a4a447-833f-4c29-a3b6-f966a0a753aa
      description: |
        To get responses of a submission.
      operationId: GET_v3-clients-dedupclientid-surveys-surveyid-submission-submissionid
    delete:
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                example:
                  errors:
                    - code: SUBMISSION_DETAILS_NOT_FOUND
                      message: >-
                        Submission Details not found :
                        e9a4a447-833f-4c29-a3b6-f966a0a753aa
      description: |
        To delete responses of a submission.
      operationId: >-
        DELETE_v3-clients-dedupclientid-surveys-surveyid-submission-submissionid
    parameters:
      - name: submissionid
        in: path
        required: true
        schema:
          type: string
      - name: surveyid
        in: path
        required: true
        schema:
          type: string
      - name: dedupclientid
        in: path
        required: true
        schema:
          type: string
  '/clientsurveysubmissions/{clientId}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  clientSurveySubmissions:
                    pagination:
                      from: 0
                      returned: 2
                      total: 2
                      maximum: 30
                      sort: {}
                    clientSurveySubmissions:
                      - id: 5c5b8760-a691-46a0-b762-f74fc2bf56cc
                        clientId: 035c313e-a39d-4098-bf89-544b553d752f
                        surveyId: b76927dc-715d-4104-a1dc-1fa4d933d8b1
                        submissionId: 52377ce7-a246-4809-be94-874a3af9f035
                        globalEnrollmentId: 7634b7ed-3f31-4822-81c0-d805b2f5ac3b
                        client:
                          id: 035c313e-a39d-4098-bf89-544b553d752f
                          firstName: Ryan
                          middleName: ''
                          lastName: Peterson
                          dob: 339989400000
                          dedupClientId: 5dfe2ac2-43af-4d6d-9ee8-0e8fac5e3eg8
                      - id: e67bb703-bce1-49b0-948d-75f286f4497b
                        clientId: 035c313e-a39d-4098-bf89-544b553d752f
                        surveyId: 57dbe6b2-83a9-4a8b-b4aa-65985241d341
                        submissionId: d89ac01a-32a4-4530-92a6-d59b161b5ca8
                        globalEnrollmentId: e166faae-1661-49ab-9987-4f66fd982cb2
                        client:
                          id: 035c313e-a39d-4098-bf89-544b553d752f
                          firstName: Ryan
                          middleName: ''
                          lastName: Peterson
                          dob: 339989400000
                          dedupClientId: 5dfe2ac2-43af-4d6d-9ee8-0e8fac5e3eg8
      description: Retrive all client survey submission details
      operationId: GET_clientsurveysubmissions-clientId
    parameters:
      - name: clientId
        in: path
        required: true
        schema:
          type: string
  '/clientsurveysubmissions/{surveySubmissionId}':
    put:
      responses:
        '200':
          description: Returns empty response
        '404':
          description: ''
          content:
            application/json:
              schema:
                example:
                  errors:
                    error:
                      code: ERR_CODE_CLIENT_SUBMISSION_NOT_FOUND
                      message: Client survey submission Not found.
      description: Update global enrollment to a survey submission
      operationId: PUT_clientsurveysubmissions-surveySubmissionId
      requestBody:
        content:
          application/json:
            schema:
              example:
                  clientsurveysubmission:
                    globalEnrollmentId: e166faae-1661-49ab-9987-4f66fd982cb2
        required: true
    parameters:
      - name: surveySubmissionId
        in: path
        required: true
        schema:
          type: string
  /clientsurveysubmissions:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  clientSurveySubmissions:
                    pagination:
                      from: 0
                      returned: 2
                      total: 2
                      maximum: 30
                      sort: {}
                    clientSurveySubmissions:
                      - id: 5c5b8760-a691-46a0-b762-f74fc2bf56cc
                        clientId: 035c313e-a39d-4098-bf89-544b553d752f
                        surveyId: b76927dc-715d-4104-a1dc-1fa4d933d8b1
                        submissionId: 52377ce7-a246-4809-be94-874a3af9f035
                        globalEnrollmentId: 7634b7ed-3f31-4822-81c0-d805b2f5ac3b
                        client:
                          id: 035c313e-a39d-4098-bf89-544b553d752f
                          firstName: Ryan
                          middleName: ''
                          lastName: Peterson
                          dob: 339989400000
                          dedupClientId: 5dfe2ac2-43af-4d6d-9ee8-0e8fac5e3eg8
                      - id: e67bb703-bce1-49b0-948d-75f286f4497b
                        clientId: 035c313e-a39d-4098-bf89-544b553d752f
                        surveyId: 57dbe6b2-83a9-4a8b-b4aa-65985241d341
                        submissionId: d89ac01a-32a4-4530-92a6-d59b161b5ca8
                        globalEnrollmentId: e166faae-1661-49ab-9987-4f66fd982cb2
                        client:
                          id: 035c313e-a39d-4098-bf89-544b553d752f
                          firstName: Ryan
                          middleName: ''
                          lastName: Peterson
                          dob: 339989400000
                          dedupClientId: 5dfe2ac2-43af-4d6d-9ee8-0e8fac5e3eg8
      operationId: GET_clientsurveysubmissions
      parameters:
        - name: q
          in: query
          required: true
          description: Search string.
          schema:
            type: string
  /questions:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  questions:
                    pagination:
                      from: 0
                      returned: 1
                      total: 1
                      maximum: 30
                      sort: {}
                    questions:
                      - questionId: 4bd3d3e1-a70a-4e66-89d9-43fd23f5f3c8
                        questionDescription: Enter number of years
                        displayText: >-
                          6. How long has it been since you and your family
                          lived in permanent stable housing?
                        questionDataType: nhhhee
                        questionType: sddvdv
                        correctValueForAssessment: ergreg
                        copyQuestionId: true
                        hudQuestion: false
                        locked: false
                        questionWeight: 1345
                        definition: stringfied JSON
                        visibility: true
                        category: question category
                        subcategory: question sub category
      operationId: GET_questions
      parameters:
        - name: text
          in: query
          required: true
          description: filter on actual question text ( displayText )
          schema:
            type: string
components:
  schemas:
    pickListGroup_id_json:
      required:
        - pickListGroup
      type: object
      properties:
        pickListGroup:
          required:
            - pickListGroupId
            - pickListGroupName
          type: object
          properties:
            pickListGroupId:
              type: string
            pickListGroupName:
              type: string
    pickListGroup_ids_json:
      required:
        - pickListGroups
      type: object
      properties:
        pickListGroups:
          required:
            - pagination
            - pickListGroups
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            pickListGroups:
              type: array
              items:
                required:
                  - pickListGroupId
                  - pickListGroupName
                type: object
                properties:
                  pickListGroupId:
                    type: string
                  pickListGroupName:
                    type: string
    pickListGroup_json:
      required:
        - pickListGroup
      type: object
      properties:
        pickListGroup:
          required:
            - pickListGroupName
          type: object
          properties:
            pickListGroupName:
              type: string
    id_pickListGroup_json:
      required:
        - pickListGroup
      type: object
      properties:
        pickListGroup:
          required:
            - pickListGroupId
          type: object
          properties:
            pickListGroupId:
              type: string
    pickListValues_id_json:
      required:
        - pickListValue
      type: object
      properties:
        pickListValue:
          required:
            - pickListValueId
            - pickListValueCode
            - valueText
          type: object
          properties:
            pickListValueId:
              type: string
            pickListValueCode:
              type: string
            valueText:
              type: string
    pickListValues_json:
      required:
        - pickListValues
      type: object
      properties:
        pickListValues:
          required:
            - pickListValues
          type: object
          properties:
            pickListValues:
              type: array
              items:
                required:
                  - pickListValueCode
                  - valueText
                type: object
                properties:
                  pickListValueCode:
                    type: string
                  valueText:
                    type: string
    id_pickListValues_json:
      required:
        - pickListValue
      type: object
      properties:
        pickListValue:
          required:
            - pickListValueId
          type: object
          properties:
            pickListValueId:
              type: string
    questionGroups_id_json:
      required:
        - questionGroup
      type: object
      properties:
        questionGroup:
          required:
            - questionGroupId
            - questionGroupName
          type: object
          properties:
            questionGroupId:
              type: string
            questionGroupName:
              type: string
    questionGroup_ids_json:
      required:
        - questionGroups
      type: object
      properties:
        questionGroups:
          required:
            - pagination
            - questionGroups
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            questionGroups:
              type: array
              items:
                required:
                  - questionIGroupId
                  - questionGroupName
                type: object
                properties:
                  questionIGroupId:
                    type: string
                  questionGroupName:
                    type: string
    questionGroups_json:
      required:
        - questionGroup
      type: object
      properties:
        questionGroup:
          required:
            - questionGroupName
          type: object
          properties:
            questionGroupName:
              type: string
    id_questionGroups_json:
      required:
        - questionGroup
      type: object
      properties:
        questionGroup:
          required:
            - questionIGroupId
          type: object
          properties:
            questionIGroupId:
              type: string
    questions_id_json:
      required:
        - question
      type: object
      properties:
        question:
          required:
            - questionId
            - questionDescription
            - displayText
            - questionDataType
            - questionType
            - correctValueForAssessment
            - copyQuestionId
            - hudQuestion
            - locked
            - questionWeight
          type: object
          properties:
            questionId:
              type: string
            questionDescription:
              type: string
            displayText:
              type: string
            questionDataType:
              type: string
            questionType:
              type: string
            correctValueForAssessment:
              type: string
            copyQuestionId:
              type: boolean
            hudQuestion:
              type: boolean
            locked:
              type: boolean
            questionWeight:
              type: integer
            pickListGroupId:
              type: string
    questions_ids_json:
      required:
        - questions
      type: object
      properties:
        questions:
          required:
            - pagination
            - questions
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            questions:
              type: array
              items:
                required:
                  - questionId
                  - questionDescription
                  - displayText
                  - questionDataType
                  - questionType
                  - correctValueForAssessment
                  - copyQuestionId
                  - hudQuestion
                  - locked
                  - questionWeight
                type: object
                properties:
                  questionId:
                    type: string
                  questionDescription:
                    type: string
                  displayText:
                    type: string
                  questionDataType:
                    type: string
                  questionType:
                    type: string
                  correctValueForAssessment:
                    type: string
                  copyQuestionId:
                    type: boolean
                  hudQuestion:
                    type: boolean
                  locked:
                    type: boolean
                  questionWeight:
                    type: integer
                  pickListGroupId:
                    type: string
    questions_json:
      required:
        - question
      type: object
      properties:
        question:
          required:
            - questionDescription
            - displayText
            - questionDataType
            - questionType
            - correctValueForAssessment
            - copyQuestionId
            - hudQuestion
            - locked
            - questionWeight
          type: object
          properties:
            questionDescription:
              type: string
            displayText:
              type: string
            questionDataType:
              type: string
            questionType:
              type: string
            correctValueForAssessment:
              type: string
            copyQuestionId:
              type: boolean
            hudQuestion:
              type: boolean
            locked:
              type: boolean
            questionWeight:
              type: integer
            pickListGroupId:
              type: string
    surveySections_json:
      required:
        - surveySection
      type: object
      properties:
        surveySection:
          required:
            - sectionText
            - sectionDetail
            - sectionWeight
            - order
          type: object
          properties:
            sectionText:
              type: string
            sectionDetail:
              type: string
            sectionWeight:
              type: integer
            order:
              type: integer
    id_questions_json:
      required:
        - question
      type: object
      properties:
        question:
          required:
            - questionId
            - copyQuestionId
            - hudQuestion
            - locked
            - questionWeight
          type: object
          properties:
            questionId:
              type: string
            copyQuestionId:
              type: boolean
            hudQuestion:
              type: boolean
            locked:
              type: boolean
            questionWeight:
              type: integer
    response_id_json:
      required:
        - response
      type: object
      properties:
        response:
          required:
            - responseId
            - responseText
            - questionScore
          type: object
          properties:
            responseId:
              type: string
            responseText:
              type: string
            questionScore:
              type: integer
            effectiveDate:
              type: string
    response_ids_json:
      required:
        - responses
      type: object
      properties:
        responses:
          required:
            - pagination
            - responses
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            responses:
              type: array
              items:
                required:
                  - responseId
                  - responseText
                  - questionScore
                type: object
                properties:
                  responseId:
                    type: string
                  responseText:
                    type: string
                  questionScore:
                    type: integer
                  effectiveDate:
                    type: string
    response_json:
      required:
        - responses
      type: object
      properties:
        responses:
          required:
            - responses
          type: object
          properties:
            responses:
              type: array
              items:
                required:
                  - questionId
                  - responseText
                type: object
                properties:
                  questionId:
                    type: string
                  responseText:
                    type: string
                  appId:
                    type: string
                  sectionId:
                    type: string
                  effectiveDate:
                    type: string
    id_response_json:
      required:
        - response
      type: object
      properties:
        response:
          required:
            - responseId
            - questionScore
          type: object
          properties:
            responseId:
              type: string
            questionScore:
              type: integer
    surveys_id_json:
      required:
        - survey
      type: object
      properties:
        survey:
          required:
            - surveyId
            - surveyTitle
            - surveyOwner
            - tagValue
            - locked
            - copySurveyId
          type: object
          properties:
            surveyId:
              type: string
            surveyTitle:
              type: string
            surveyOwner:
              type: string
            tagValue:
              type: string
            locked:
              type: boolean
            copySurveyId:
              type: boolean
    surveys_ids_json:
      required:
        - survies
      type: object
      properties:
        surveys:
          required:
            - pagination
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            surveys:
              type: array
              items:
                required:
                  - surveyId
                  - surveyTitle
                  - surveyOwner
                  - tagValue
                  - locked
                  - copySurveyId
                type: object
                properties:
                  surveyId:
                    type: string
                  surveyTitle:
                    type: string
                  surveyOwner:
                    type: string
                  tagValue:
                    type: string
                  locked:
                    type: boolean
                  copySurveyId:
                    type: boolean
    surveys_json:
      required:
        - survey
      type: object
      properties:
        survey:
          required:
            - surveyTitle
            - surveyOwner
            - tagValue
            - locked
            - copySurveyId
          type: object
          properties:
            surveyTitle:
              type: string
            surveyOwner:
              type: string
            tagValue:
              type: string
            locked:
              type: boolean
            copySurveyId:
              type: boolean
    id_surveys_json:
      required:
        - survey
      type: object
      properties:
        survey:
          required:
            - surveyId
            - locked
            - copySurveyId
          type: object
          properties:
            surveyId:
              type: string
            locked:
              type: boolean
            copySurveyId:
              type: boolean
    surveySections_id_json:
      required:
        - surveySection
      type: object
      properties:
        surveySection:
          required:
            - surveySectionId
            - sectionText
            - sectionDetail
            - sectionWeight
            - order
          type: object
          properties:
            surveySectionId:
              type: string
            sectionText:
              type: string
            sectionDetail:
              type: string
            sectionWeight:
              type: integer
            order:
              type: integer
    surveySection_ids_json:
      required:
        - surveySections
      type: object
      properties:
        surveySections:
          required:
            - pagination
            - surveySections
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            surveySections:
              type: array
              items:
                required:
                  - surveySectionId
                  - sectionText
                  - sectionDetail
                  - sectionWeight
                  - order
                type: object
                properties:
                  surveySectionId:
                    type: string
                  sectionText:
                    type: string
                  sectionDetail:
                    type: string
                  sectionWeight:
                    type: integer
                  order:
                    type: integer
    id_surveySection_json:
      required:
        - surveySection
      type: object
      properties:
        surveySection:
          required:
            - surveySectionId
            - sectionWeight
            - order
          type: object
          properties:
            surveySectionId:
              type: string
            sectionWeight:
              type: integer
            order:
              type: integer
    score_ids_json:
      required:
        - sectionScores
      type: object
      properties:
        sectionScores:
          required:
            - pagination
            - sectionScores
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            sectionScores:
              type: array
              items:
                required:
                  - sectionScoreId
                  - sectionId
                  - surveyId
                  - clientId
                  - sectionScore
                type: object
                properties:
                  sectionScoreId:
                    type: string
                  sectionId:
                    type: string
                  surveyId:
                    type: string
                  clientId:
                    type: string
                  sectionScore:
                    type: integer
    section_question:
      required:
        - sectionQuestionMappings
      type: object
      properties:
        sectionQuestionMappings:
          required:
            - sectionQuestionMappings
          type: object
          properties:
            sectionQuestionMappings:
              type: array
              items:
                required:
                  - question
                  - required
                type: object
                properties:
                  question:
                    required:
                      - questionId
                    type: object
                    properties:
                      questionId:
                        type: string
                  required:
                    type: boolean
    section_score:
      required:
        - sectionScore
      type: object
      properties:
        sectionScore:
          required:
            - sectionScoreId
            - sectionId
            - surveyId
            - clientId
            - sectionScore
          type: object
          properties:
            sectionScoreId:
              type: string
            sectionId:
              type: string
            surveyId:
              type: string
            clientId:
              type: string
            sectionScore:
              type: integer
    surveys_id_json_v2:
      required:
        - survey
      type: object
      properties:
        survey:
          required:
            - surveyId
            - surveyTitle
            - surveyOwner
            - tagValue
            - locked
            - copySurveyId
            - surveyDefinition
          type: object
          properties:
            surveyId:
              type: string
            surveyTitle:
              type: string
            surveyOwner:
              type: string
            tagValue:
              type: string
            locked:
              type: boolean
            copySurveyId:
              type: boolean
            surveyDefinition:
              type: string
    surveys_ids_json_v2:
      required:
        - surveys
      type: object
      properties:
        surveys:
          required:
            - pagination
            - surveys
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            surveys:
              type: array
              items:
                required:
                  - surveyId
                  - surveyTitle
                  - surveyOwner
                  - tagValue
                  - locked
                  - copySurveyId
                  - surveyDefinition
                type: object
                properties:
                  surveyId:
                    type: string
                  surveyTitle:
                    type: string
                  surveyOwner:
                    type: string
                  tagValue:
                    type: string
                  locked:
                    type: boolean
                  copySurveyId:
                    type: boolean
                  surveyDefinition:
                    type: string
    surveys_json_v2:
      required:
        - survey
      type: object
      properties:
        survey:
          required:
            - surveyTitle
            - surveyOwner
            - tagValue
            - locked
            - copySurveyId
            - surveyDefinition
          type: object
          properties:
            surveyTitle:
              type: string
            surveyOwner:
              type: string
            tagValue:
              type: string
            locked:
              type: boolean
            copySurveyId:
              type: boolean
            surveyDefinition:
              type: string
    id_surveys_json_v2:
      required:
        - survey
      type: object
      properties:
        survey:
          required:
            - surveyId
            - locked
            - copySurveyId
            - surveyDefinition
          type: object
          properties:
            surveyId:
              type: string
            locked:
              type: boolean
            copySurveyId:
              type: boolean
            surveyDefinition:
              type: string
    questions_id_json_v2:
      required:
        - question
      type: object
      properties:
        question:
          required:
            - questionId
            - questionDescription
            - displayText
            - questionDataType
            - questionType
            - correctValueForAssessment
            - copyQuestionId
            - hudQuestion
            - locked
            - questionWeight
          type: object
          properties:
            questionId:
              type: string
            questionDescription:
              type: string
            displayText:
              type: string
            questionDataType:
              type: string
            questionType:
              type: string
            correctValueForAssessment:
              type: string
            copyQuestionId:
              type: boolean
            hudQuestion:
              type: boolean
            locked:
              type: boolean
            questionWeight:
              type: integer
            pickListValues:
              type: string
    questions_ids_json_v2:
      required:
        - questions
      type: object
      properties:
        questions:
          required:
            - pagination
            - questions
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            questions:
              type: array
              items:
                required:
                  - questionId
                  - questionDescription
                  - displayText
                  - questionDataType
                  - questionType
                  - correctValueForAssessment
                  - copyQuestionId
                  - hudQuestion
                  - locked
                  - questionWeight
                type: object
                properties:
                  questionId:
                    type: string
                  questionDescription:
                    type: string
                  displayText:
                    type: string
                  questionDataType:
                    type: string
                  questionType:
                    type: string
                  correctValueForAssessment:
                    type: string
                  copyQuestionId:
                    type: boolean
                  hudQuestion:
                    type: boolean
                  locked:
                    type: boolean
                  questionWeight:
                    type: integer
                  pickListValues:
                    type: string
    questions_json_v2:
      required:
        - question
      type: object
      properties:
        question:
          required:
            - questionDescription
            - displayText
            - questionDataType
            - questionType
            - correctValueForAssessment
            - copyQuestionId
            - hudQuestion
            - locked
            - questionWeight
          type: object
          properties:
            questionDescription:
              type: string
            displayText:
              type: string
            questionDataType:
              type: string
            questionType:
              type: string
            correctValueForAssessment:
              type: string
            copyQuestionId:
              type: boolean
            hudQuestion:
              type: boolean
            locked:
              type: boolean
            questionWeight:
              type: integer
            pickListValues:
              type: string
    id_questions_json_v2:
      required:
        - question
      type: object
      properties:
        question:
          required:
            - questionId
            - copyQuestionId
            - hudQuestion
            - locked
            - questionWeight
          type: object
          properties:
            questionId:
              type: string
            copyQuestionId:
              type: boolean
            hudQuestion:
              type: boolean
            locked:
              type: boolean
            questionWeight:
              type: integer
            pickListValues:
              type: string
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    oauth_2_0:
      description: |
        The HMIS API supports OAuth 2.0 for authenticating all API requests.
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://hmislynk.com/hmis-authorization-service/rest/token'
          scopes:
            user: ''
            administrator: ''
  links: {}
  callbacks: {}