#%RAML 1.0
title:  Survey Service
version: 3.1.2
baseUri: https://www.hmislynk.com/survey-api/rest
mediaType: application/json
protocols:
  - HTTPS
securedBy: [oauth_2_0]
securitySchemes:
  oauth_2_0: !include security-schemes/oauth_2_0.raml
types:
  pickListGroup_id_json: !include schemas/pickListGroup_id_json.json
  pickListGroup_ids_json: !include schemas/pickListGroup_ids_json.json
  pickListGroup_json: !include schemas/pickListGroup_json.json
  id_pickListGroup_json: !include schemas/id_pickListGroup_json.json
  pickListValues_id_json: !include schemas/pickListValues_id_json.json
  pickListValues_ids_json: !include schemas/pickListValues_ids_json.json
  pickListValues_json: !include schemas/pickListValues_json.json
  id_pickListValues_json: !include schemas/id_pickListValues_json.json
  questionGroups_id_json: !include schemas/questionGroups_id_json.json
  questionGroup_ids_json: !include schemas/questionGroup_ids_json.json
  questionGroups_json: !include schemas/questionGroups_json.json
  id_questionGroups_json: !include schemas/id_questionGroups_json.json
  questions_id_json: !include schemas/questions_id_json.json
  questions_ids_json: !include schemas/questions_ids_json.json
  questions_json: !include schemas/questions_json.json
  surveySections_json: !include schemas/surveySections_json.json
  id_questions_json: !include schemas/id_questions_json.json
  response_id_json: !include schemas/response_id_json_v3.json
  response_ids_json: !include schemas/response_ids_json_v3.json
  response_json: !include schemas/response_json_v3.json
  id_response_json: !include schemas/id_response_json.json
  surveys_id_json: !include schemas/surveys_id_json.json
  surveys_ids_json: !include schemas/surveys_ids_json.json
  surveys_json: !include schemas/surveys_json.json
  id_surveys_json: !include schemas/id_surveys_json.json
  surveySections_id_json: !include schemas/surveySections_id_json.json
  surveySection_ids_json: !include schemas/surveySection_ids_json.json
  id_surveySection_json: !include schemas/id_surveySection_json.json
  score_ids_json: !include schemas/score_ids_json_v3.json
  section_question: !include schemas/section_question.json
  section_score : !include schemas/section_score_v3.json
  surveys_id_json_v2: !include schemas/surveys_id_json_v2.json
  surveys_ids_json_v2: !include schemas/surveys_ids_json_v2.json
  surveys_json_v2: !include schemas/surveys_json_v2.json
  id_surveys_json_v2: !include schemas/id_surveys_json_v2.json
  questions_id_json_v2: !include schemas/questions_id_json_v2.json
  questions_ids_json_v2: !include schemas/questions_ids_json_v2.json
  questions_json_v2: !include schemas/questions_json_v2.json
  id_questions_json_v2: !include schemas/id_questions_json_v2.json

resourceTypes:
  collection:
    description: "Operations performed on the set of all HMIS <<resourcePathName>> within the system, and for adding a new <<resourcePathName|!singularize>> to the set of <<resourcePathName>> "
    get:
      description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
      responses:
        200:
          description: OK – Everything is working.
          body:
            application/json:
              schema: <<schema_ids_json>>
              example: <<schema_ids_json_example>>
        400:
          description: Bad Request – The request was invalid or cannot be served.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: 500 – Internal Server Error
    post:
      description: |
        Add a <<resourcePathName|!singularize>>
      body:
        application/json:
          schema: <<schema_json>>
          example: <<schema_json_example>>
      responses:
        201:
          description: OK - New resource has been created.
          body:
            application/json:
              schema: <<id_schema_json>>
              example: <<id_schema_json_example>>
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        422:
          description: Unprocessable Entity - Request body is incorrect.
        500:
          description: 500 – Internal Server Error.
  member:
    get:
      description: Gets a <<resourcePathName|!singularize>> using a URI resource parameter/ID.
      responses:
        200:
          description: OK – Everything is working.
          body:
            application/json:
              schema: <<schema_id_json>>
              example: <<schema_id_json_example>>
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires an user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: Internal Server Error
    put:
      description: Updates a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
      body:
        application/json:
          schema: <<schema_json>>
          example: <<schema_json_example>>
      responses:
        200:
          description: OK – Everything is working.
        304:
          description: Not Modified – The client can use cached data.
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires a user.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: Internal Server Error.
    delete:
      description: Deletes a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
      responses:
        204:
          description: OK – The resource was successfully deleted.
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: Internal Server Error.
/picklistgroups:
  type: {
    collection: {
        id_schema_json: id_pickListGroup_json,
        schema_json:  pickListGroup_json,
        schema_ids_json: pickListGroup_ids_json,
        schema_ids_json_example : !include examples/pickListGroup_ids_json_example.json,
        schema_json_example: !include examples/pickListGroup_json_example.json,
        id_schema_json_example: !include examples/id_pickListGroup_json_example.json
    }
  }
  /{picklistgroupid}:
    uriParameters:
      picklistgroupid:
        displayName: PickListGroup Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  pickListGroup_json
        schema_id_json: pickListGroup_id_json
        schema_id_json_example : !include examples/pickListGroup_id_json_example.json
        schema_json_example: !include examples/pickListGroup_json_example.json
/picklistgroup/{picklistgroupid}/picklistvalues:
  type: {
    collection: {
        id_schema_json: id_pickListValues_json,
        schema_json:  pickListValues_json,
        schema_ids_json: pickListValues_ids_json,
        schema_ids_json_example : !include examples/pickListValues_ids_json_example.json,
        schema_json_example: !include examples/pickListValues_json_example.json,
        id_schema_json_example: !include examples/id_pickListValues_json_example.json
    }
  }
/picklistgroup/{picklistgroupid}/picklistvalues/{picklistvalueid}:
    uriParameters:
      picklistvalueid:
        displayName: PickListValues Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json: pickListValues_json
        schema_id_json: pickListValues_id_json
        schema_id_json_example: !include examples/pickListValues_id_json_example.json
        schema_json_example: !include examples/pickListValues_json_example.json
/questiongroups:
  type: {
    collection: {
        id_schema_json: id_questionGroups_json,
        schema_json:  questionGroups_json,
        schema_ids_json: questionGroup_ids_json,
        schema_ids_json_example : !include examples/questionGroup_ids_json_example.json,
        schema_json_example: !include examples/questionGroups_json_example.json,
        id_schema_json_example: !include examples/id_questionGroups_json_example.json
    }
  }
  /{questiongroupid}:
    uriParameters:
      questiongroupid:
        displayName: QuestionGroups Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  questionGroups_json
        schema_id_json: questionGroups_id_json
        schema_id_json_example : !include examples/questionGroups_id_json_example.json
        schema_json_example: !include examples/questionGroups_json_example.json
/v2/questiongroups/{questiongroupid}/questions:
   get:
      description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
      responses:
        200:
          description: OK – Everything is working.
          body:
            application/json:
              schema: questions_ids_json_v2
              example: !include examples/questions_ids_json_example_v2.json
        400:
          description: Bad Request – The request was invalid or cannot be served.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: 500 – Internal Server Error
   post:
     description:  |
          The following operators can be used for "correctValueForAssessment" field.
            1) Relational operators – equal (==, eq), not equal (!=, ne), less than (<, lt), less than or equal (<= , le), greater than (>, gt), and greater than or equal (>=, ge).
            2) Logical operators – and, or, and not (!).
            Question Data Type indicates the data type of the question and currently the following data types are allowed
            Allowed values for questionDataType : NUMBER , STRING , BOOLEAN
            Question Type indicates the type of UI control that is to be presented to the end us.
            Allowed values for questionType: TEXT, CHECKBOX, DROPDOWN , RADIOBUTTON
            For questions of type RADIOBUTTON , CHECKBOX and DROPDOWN pickListValues is required - Note that pickListValues should be a stringfied json.
            Please refer the following for more details on stringying JSON
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
     body:
        application/json:
          schema: questions_json_v2
          example: !include examples/questions_json_example_v2.json
     responses:
        201:
          description: OK - New resource has been created.
          body:
            application/json:
              schema: id_questions_json_v2
              example: !include examples/id_questions_json_example_v2.json
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        422:
          description: Unprocessable Entity - Request body is incorrect.
        500:
          description: 500 – Internal Server Error.
/v2/questiongroups/{questiongroupid}/questions/{questionid}:
          uriParameters:
            questionid:
              displayName: Questions Identifier
              type: string
              example: ADBC1111211111114111111111D1111V
          type:
            member:
              schema_json:  questions_json_v2
              schema_id_json: questions_id_json_v2
              schema_id_json_example : !include examples/questions_id_json_example_v2.json
              schema_json_example: !include examples/questions_json_example_v2.json
/v2/surveys:
  description: |
       Allowed values for tag value are SINGLE_ADULT,FAMILY,YOUTH,HUD.
       "surveyDefintion" field should be a stringfied json.
        Please refer the following for more details on stringying JSON
          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
        Currently "locked" and "copySurveyId" field values are not used for any business validations
  type: {
    collection: {
        id_schema_json: id_surveys_json_v2,
        schema_json:  surveys_json_v2,
        schema_ids_json: surveys_ids_json_v2,
        schema_ids_json_example : !include examples/surveys_ids_json_example_v2.json,
        schema_json_example: !include examples/surveys_json_example_v2.json,
        id_schema_json_example: !include examples/id_surveys_json_example_v2.json
    }
  }
  /{surveyid}:
    uriParameters:
      surveyid:
        displayName: Surveys Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  surveys_json_v2
        schema_id_json: surveys_id_json_v2
        schema_id_json_example : !include examples/surveys_id_json_example_v2.json
        schema_json_example: !include examples/surveys_json_example_v2.json
/surveys/{surveyid}/surveysections:
      type: {
        collection: {
            id_schema_json: id_surveySection_json,
            schema_json:  surveySections_json,
            schema_ids_json: surveySection_ids_json,
            schema_ids_json_example : !include examples/surveySection_ids_json_example.json,
            schema_json_example: !include examples/surveySections_json_example.json,
            id_schema_json_example: !include examples/id_surveySection_json_example.json
        }
      }
      /{sectionid}:
        uriParameters:
          sectionid:
            displayName: SurveySections Identifier
            type: string
            example: ADBC1111211111114111111111D1111V
        type:
          member:
            schema_json:  surveySections_json
            schema_id_json: surveySections_id_json
            schema_id_json_example : !include examples/surveySections_id_json_example.json
            schema_json_example: !include examples/surveySections_json_example.json
        /questions:
          post:
            description:  |
                    Add question to a survey section.
            body:
              example: !include examples/section_question.json
              schema: section_question
            responses:
              200:
               description: Question added to survey
              400:
                description: Bad Request – The request was invalid or cannot be served.
              401:
                description: Unauthorized – The request requires user authentication.
              403:
                description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
              404:
                description: Not found – There is no resource behind the URI.
              422:
                description: Unprocessable Entity - Request body is incorrect.
              500:
                description: 500 – Internal Server Error.
          get:
            description: |
                  Read all the question of selected survey section.
            responses:
              200:
                description: OK – Everything is working.
                body:
                  application/json:
                    schema: questions_ids_json
                    example: !include examples/questions_ids_json_example.json
              400:
                description: Bad Request – The request was invalid or cannot be served.
              403:
                description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
              404:
                description: Not found – There is no resource behind the URI.
              500:
                description: 500 – Internal Server Error
          /{questionid}:
            delete:
              description: Deletes a specific question from specified by section.
              responses:
                204:
                  description: OK – The resource was successfully deleted.
                400:
                  description: Bad Request – The request was invalid or cannot be served.
                401:
                  description: Unauthorized – The request requires user authentication.
                403:
                  description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
                404:
                  description: Not found – There is no resource behind the URI.
                500:
                  description: Internal Server Error.
/v3/clients:
  /{dedupclientid}:
    /surveys:
      /{surveyid}:
        /responses:
          type: {
              collection: {
                  id_schema_json: id_response_json,
                  schema_json:  response_json,
                  schema_ids_json: response_ids_json,
                  schema_ids_json_example : !include examples/response_ids_json_example_v3.json,
                  schema_json_example: !include examples/response_json_example_v3.json,
                  id_schema_json_example: !include examples/id_response_json_example_v3.json
              }
          }
          /{responseid}:
            uriParameters:
              responseid:
                displayName: Response Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            type:
              member:
                schema_json:  response_id_json
                schema_id_json: response_id_json
                schema_id_json_example : !include examples/response_id_json_example_v3.json
                schema_json_example: !include examples/response_id_json_example_v3.json
        /sections:
          /{sectionid}:
            /scores:
              post:
                description: To insert sctore for a section
                body:
                  example: |
                              {
                                 "sectionScore":{
                                   "sectionScore":30
                                 }
                              }
                  schema: |
                             {
                              "$schema": "http://json-schema.org/draft-04/schema#",
                              "type": "object",
                              "properties": {
                                "sectionScore": {
                                  "type": "object",
                                  "properties": {
                                    "sectionScore": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "sectionScore"
                                  ]
                                }
                              },
                              "required": [
                                "sectionScore"
                              ]
                              }
                responses:
                    200:
                      body:
                        example: !include examples/section_score_example_v3.json
                        schema : section_score

              get:
                description: Read a section score.
                responses:
                  200:
                    body:
                      example: !include examples/section_score_example_v3.json
                      schema : section_score
              put:
                description: Recalcute the score specified section
              delete:
                description: Delete score of a specfied section
        /scores:
          get:
            description: Read a section score.
            responses:
              200:
                body:
                  example: !include examples/score_ids_json_example_v3.json
                  schema : score_ids_json
          put:
            description: Recalcute the score specified section
          delete:
            description: Delete score of a specfied section
        /submissions/{submissionid}:

          put:
            description: |
                             To update responses data of submission
            body:
             application/json:
               example:
                      !include examples/response_json_example_v3.json
            responses:
              200:
                body:
              404:
                body:
                 application/json:
                  example: |
                            {
                              "errors": [
                                {
                                  "code": "SUBMISSION_DETAILS_NOT_FOUND",
                                  "message": "Submission Details not found : e9a4a447-833f-4c29-a3b6-f966a0a753aa"
                                }
                              ]
                            }

          get:
            description:  |
                    To get responses of a submission.
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/response_ids_json_example_v3.json
              404:
                body:
                  application/json:
                    example: |
                                  {
                                    "errors":[
                                    {
                                       "code":"SUBMISSION_DETAILS_NOT_FOUND",
                                       "message":"Submission Details not found : e9a4a447-833f-4c29-a3b6-f966a0a753aa"
                                    }
                                    ]
                                  }
          delete:
            description:  |
                    To delete responses of a submission.
            responses:
              200:
                body:
              404:
                body:
                  application/json:
                    example: |
                                  {
                                    "errors":[
                                    {
                                       "code":"SUBMISSION_DETAILS_NOT_FOUND",
                                       "message":"Submission Details not found : e9a4a447-833f-4c29-a3b6-f966a0a753aa"
                                    }
                                    ]
                                  }
/clientsurveysubmissions/{clientId}:
  get:
    description: Retrive all client survey submission details
    responses:
      200:
        body:
          application/json:
            example:
              {
                  "clientSurveySubmissions":{
                     "pagination":{
                        "from":0,
                        "returned":2,
                        "total":2,
                        "maximum":30,
                        "sort":{

                        }
                     },
                     "clientSurveySubmissions":[
                        {
                           "id":"5c5b8760-a691-46a0-b762-f74fc2bf56cc",
                           "clientId":"035c313e-a39d-4098-bf89-544b553d752f",
                           "surveyId":"b76927dc-715d-4104-a1dc-1fa4d933d8b1",
                           "submissionId":"52377ce7-a246-4809-be94-874a3af9f035",
                           "globalEnrollmentId":"7634b7ed-3f31-4822-81c0-d805b2f5ac3b",
                           "client":{
                                 "id":"035c313e-a39d-4098-bf89-544b553d752f",
                                  "firstName":"Ryan",
                                  "middleName":"",
                                  "lastName":"Peterson",
                                  "dob":339989400000,
                                  "dedupClientId":"5dfe2ac2-43af-4d6d-9ee8-0e8fac5e3eg8"
                               }
                        },
                        {
                           "id":"e67bb703-bce1-49b0-948d-75f286f4497b",
                           "clientId":"035c313e-a39d-4098-bf89-544b553d752f",
                           "surveyId":"57dbe6b2-83a9-4a8b-b4aa-65985241d341",
                           "submissionId":"d89ac01a-32a4-4530-92a6-d59b161b5ca8",
                           "globalEnrollmentId":"e166faae-1661-49ab-9987-4f66fd982cb2",
                           "client":{
                                   "id":"035c313e-a39d-4098-bf89-544b553d752f",
                                    "firstName":"Ryan",
                                    "middleName":"",
                                    "lastName":"Peterson",
                                    "dob":339989400000,
                                    "dedupClientId":"5dfe2ac2-43af-4d6d-9ee8-0e8fac5e3eg8"
                                 }
                        }
                     ]
                  }
               }
/clientsurveysubmissions/{clientSubmissionId}:
  put:
    description: Update global enrollment to a survey submission
    body:
      application/json:
        example:
          {
            "clientsurveysubmission":{
                "globalEnrollmentId":"e166faae-1661-49ab-9987-4f66fd982cb2"
            }
          }
    responses:
      200:
        description: Returns empty response
      404:
          body:
            application/json:
              example: |
                      {
                                "errors": {
                                  "error": {
                                              "code": "ERR_CODE_CLIENT_SUBMISSION_NOT_FOUND",
                                              "message": "Client survey submission Not found."
                                           }
                                  }
                              }



/clientsurveysubmissions:
  description: search on client survey submissions based on by FN/LN and global client id
  get:
   queryParameters:
     q:
       description: Search string.
       required: true
   responses:
    200:
     body:
       application/json:
         example: |
           {
               "clientSurveySubmissions":{
                  "pagination":{
                     "from":0,
                     "returned":2,
                     "total":2,
                     "maximum":30,
                     "sort":{

                     }
                  },
                  "clientSurveySubmissions":[
                     {
                        "id":"5c5b8760-a691-46a0-b762-f74fc2bf56cc",
                        "clientId":"035c313e-a39d-4098-bf89-544b553d752f",
                        "surveyId":"b76927dc-715d-4104-a1dc-1fa4d933d8b1",
                        "submissionId":"52377ce7-a246-4809-be94-874a3af9f035",
                        "globalEnrollmentId":"7634b7ed-3f31-4822-81c0-d805b2f5ac3b",
                        "client":{
                              "id":"035c313e-a39d-4098-bf89-544b553d752f",
                               "firstName":"Ryan",
                               "middleName":"",
                               "lastName":"Peterson",
                               "dob":339989400000,
                               "dedupClientId":"5dfe2ac2-43af-4d6d-9ee8-0e8fac5e3eg8"
                            }
                     },
                     {
                        "id":"e67bb703-bce1-49b0-948d-75f286f4497b",
                        "clientId":"035c313e-a39d-4098-bf89-544b553d752f",
                        "surveyId":"57dbe6b2-83a9-4a8b-b4aa-65985241d341",
                        "submissionId":"d89ac01a-32a4-4530-92a6-d59b161b5ca8",
                        "globalEnrollmentId":"e166faae-1661-49ab-9987-4f66fd982cb2",
                        "client":{
                                "id":"035c313e-a39d-4098-bf89-544b553d752f",
                                 "firstName":"Ryan",
                                 "middleName":"",
                                 "lastName":"Peterson",
                                 "dob":339989400000,
                                 "dedupClientId":"5dfe2ac2-43af-4d6d-9ee8-0e8fac5e3eg8"
                              }
                     }
                  ]
               }
            }

/questions:
  description: Search on survey questions
  get:
    queryParameters:
      text:
        description: filter on actual question text ( displayText )
        required: true
    responses:
      200:
        body:
          application/json:
            example:
              {
                 "questions":{
                    "pagination":{
                       "from":0,
                       "returned":1,
                       "total":1,
                       "maximum":30,
                       "sort":{

                       }
                    },
                    "questions":[
                       {
                          "questionId":"4bd3d3e1-a70a-4e66-89d9-43fd23f5f3c8",
                          "questionDescription":"Enter number of years",
                          "displayText":"6. How long has it been since you and your family lived in permanent stable housing?",
                          "questionDataType":"nhhhee",
                          "questionType":"sddvdv",
                          "correctValueForAssessment":"ergreg",
                          "copyQuestionId":true,
                          "hudQuestion":false,
                          "locked":false,
                          "questionWeight":1345,
                          "definition":"stringfied JSON",
                          "visibility":true,
                          "category":"question category",
                          "subcategory":"question sub category"
                       }
                    ]
                 }
              }
