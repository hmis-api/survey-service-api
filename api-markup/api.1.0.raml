#%RAML 1.0
title:  Survey Service
version: 2.0.0
baseUri: https://www.hmislynk.com/survey-api/rest
mediaType: application/json
protocols:
  - HTTPS
securedBy: [oauth_2_0]
securitySchemes:
  oauth_2_0: !include security-schemes/oauth_2_0.raml
types:
  pickListGroup_id_json: !include schemas/pickListGroup_id_json.json
  pickListGroup_ids_json: !include schemas/pickListGroup_ids_json.json
  pickListGroup_json: !include schemas/pickListGroup_json.json
  id_pickListGroup_json: !include schemas/id_pickListGroup_json.json
  pickListValues_id_json: !include schemas/pickListValues_id_json.json
  pickListValues_ids_json: !include schemas/pickListValues_ids_json.json
  pickListValues_json: !include schemas/pickListValues_json.json
  id_pickListValues_json: !include schemas/id_pickListValues_json.json
  questionGroups_id_json: !include schemas/questionGroups_id_json.json
  questionGroup_ids_json: !include schemas/questionGroup_ids_json.json
  questionGroups_json: !include schemas/questionGroups_json.json
  id_questionGroups_json: !include schemas/id_questionGroups_json.json
  questions_id_json: !include schemas/questions_id_json.json
  questions_ids_json: !include schemas/questions_ids_json.json
  questions_json: !include schemas/questions_json.json
  surveySections_json: !include schemas/surveySections_json.json
  id_questions_json: !include schemas/id_questions_json.json
  response_id_json: !include schemas/response_id_json.json
  response_ids_json: !include schemas/response_ids_json.json
  response_json: !include schemas/response_json.json
  id_response_json: !include schemas/id_response_json.json
  surveys_id_json: !include schemas/surveys_id_json.json
  surveys_ids_json: !include schemas/surveys_ids_json.json
  surveys_json: !include schemas/surveys_json.json
  id_surveys_json: !include schemas/id_surveys_json.json
  surveys_id_json_v2: !include schemas/surveys_id_json_v2.json
  surveys_ids_json_v2: !include schemas/surveys_ids_json_v2.json
  surveys_json_v2: !include schemas/surveys_json_v2.json
  id_surveys_json_v2: !include schemas/id_surveys_json_v2.json
  surveySections_id_json: !include schemas/surveySections_id_json.json
  surveySection_ids_json: !include schemas/surveySection_ids_json.json
  id_surveySection_json: !include schemas/id_surveySection_json.json
  score_ids_json: !include schemas/score_ids_json.json
  section_question: !include schemas/section_question.json
  section_score : !include schemas/section_score.json

resourceTypes:
  collection:
    description: "Operations performed on the set of all HMIS <<resourcePathName>> within the system, and for adding a new <<resourcePathName|!singularize>> to the set of <<resourcePathName>> "
    get:
      description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
      responses:
        200:
          description: OK – Everything is working.
          body:
            application/json:
              schema: <<schema_ids_json>>
              example: <<schema_ids_json_example>>
        400:
          description: Bad Request – The request was invalid or cannot be served.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: 500 – Internal Server Error
    post:
      description: |
        Add a <<resourcePathName|!singularize>>
      body:
        application/json:
          schema: <<schema_json>>
          example: <<schema_json_example>>
      responses:
        201:
          description: OK - New resource has been created.
          body:
            application/json:
              schema: <<id_schema_json>>
              example: <<id_schema_json_example>>
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        422:
          description: Unprocessable Entity - Request body is incorrect.
        500:
          description: 500 – Internal Server Error.
  member:
    get:
      description: Gets a <<resourcePathName|!singularize>> using a URI resource parameter/ID.
      responses:
        200:
          description: OK – Everything is working.
          body:
            application/json:
              schema: <<schema_id_json>>
              example: <<schema_id_json_example>>
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires an user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: Internal Server Error
    put:
      description: Updates a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
      body:
        application/json:
          schema: <<schema_json>>
          example: <<schema_json_example>>
      responses:
        200:
          description: OK – Everything is working.
        304:
          description: Not Modified – The client can use cached data.
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires a user.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: Internal Server Error.
    delete:
      description: Deletes a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
      responses:
        204:
          description: OK – The resource was successfully deleted.
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: Internal Server Error.
/picklistgroups:
  type: {
    collection: {
        id_schema_json: id_pickListGroup_json,
        schema_json:  pickListGroup_json,
        schema_ids_json: pickListGroup_ids_json,
        schema_ids_json_example : !include examples/pickListGroup_ids_json_example.json,
        schema_json_example: !include examples/pickListGroup_json_example.json,
        id_schema_json_example: !include examples/id_pickListGroup_json_example.json
    }
  }
  /{picklistgroupid}:
    uriParameters:
      picklistgroupid:
        displayName: PickListGroup Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  pickListGroup_json
        schema_id_json: pickListGroup_id_json
        schema_id_json_example : !include examples/pickListGroup_id_json_example.json
        schema_json_example: !include examples/pickListGroup_json_example.json
/picklistgroup/{picklistgroupid}/picklistvalues:
  type: {
    collection: {
        id_schema_json: id_pickListValues_json,
        schema_json:  pickListValues_json,
        schema_ids_json: pickListValues_ids_json,
        schema_ids_json_example : !include examples/pickListValues_ids_json_example.json,
        schema_json_example: !include examples/pickListValues_json_example.json,
        id_schema_json_example: !include examples/id_pickListValues_json_example.json
    }
  }
/picklistgroup/{picklistgroupid}/picklistvalues/{picklistvalueid}:
    uriParameters:
      picklistvalueid:
        displayName: PickListValues Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json: pickListValues_json
        schema_id_json: pickListValues_id_json
        schema_id_json_example: !include examples/pickListValues_id_json_example.json
        schema_json_example: !include examples/pickListValues_json_example.json
/questiongroups:
  type: {
    collection: {
        id_schema_json: id_questionGroups_json,
        schema_json:  questionGroups_json,
        schema_ids_json: questionGroup_ids_json,
        schema_ids_json_example : !include examples/questionGroup_ids_json_example.json,
        schema_json_example: !include examples/questionGroups_json_example.json,
        id_schema_json_example: !include examples/id_questionGroups_json_example.json
    }
  }
  /{questiongroupid}:
    uriParameters:
      questiongroupid:
        displayName: QuestionGroups Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  questionGroups_json
        schema_id_json: questionGroups_id_json
        schema_id_json_example : !include examples/questionGroups_id_json_example.json
        schema_json_example: !include examples/questionGroups_json_example.json
    /questions:
      get:
        description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
        responses:
          200:
            description: OK – Everything is working.
            body:
              application/json:
                schema: questions_ids_json
                example: !include examples/questions_ids_json_example.json
          400:
            description: Bad Request – The request was invalid or cannot be served.
          403:
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500:
            description: 500 – Internal Server Error
      post:
        description: |
             The following operators can be used for "correctValueForAssessment" field.
              1) Relational operators – equal (==, eq), not equal (!=, ne), less than (<, lt), less than or equal (<= , le), greater than (>, gt), and greater than or equal (>=, ge).
              2) Logical operators – and, or, and not (!).

              Question Data Type indicates the data type of the question and currently the following data types are allowed
              Allowed values for questionDataType : NUMBER , STRING , BOOLEAN

              Question Type indicates the type of UI control that is to be presented to the end us.
              Allowed values for questionType: TEXT, CHECKBOX, DROPDOWN , RADIOBUTTON
              For questions of type RADIOBUTTON , CHECKBOX and DROPDOWN pickListGroupId is required  (example: "pickListGroupId": "37766271-7cb8-4c0b-9210-07dc7f82b871")

        body:
          application/json:
            schema: questions_json
            example: !include examples/questions_json_example.json
        responses:
          201:
            description: OK - New resource has been created.
            body:
              application/json:
                schema: id_questions_json
                example: !include examples/id_questions_json_example.json
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires user authentication.
          403:
            description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          422:
            description: Unprocessable Entity - Request body is incorrect.
          500:
            description: 500 – Internal Server Error.
      /{questionid}:
        uriParameters:
          questionid:
            displayName: Questions Identifier
            type: string
            example: ADBC1111211111114111111111D1111V
        type:
          member:
            schema_json:  questions_json
            schema_id_json: questions_id_json
            schema_id_json_example : !include examples/questions_id_json_example.json
            schema_json_example: !include examples/questions_json_example.json
/surveys:
  description: |
          Allowed values for tag value are SINGLE_ADULT,FAMILY,YOUTH,HUD
  type: {
    collection: {
        id_schema_json: id_surveys_json,
        schema_json:  surveys_json,
        schema_ids_json: surveys_ids_json,
        schema_ids_json_example : !include examples/surveys_ids_json_example.json,
        schema_json_example: !include examples/surveys_json_example.json,
        id_schema_json_example: !include examples/id_surveys_json_example.json
    }
  }
  /{surveyid}:
    uriParameters:
      surveyid:
        displayName: Surveys Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  surveys_json
        schema_id_json: surveys_id_json
        schema_id_json_example : !include examples/surveys_id_json_example.json
        schema_json_example: !include examples/surveys_json_example.json
    /surveysections:
      type: {
        collection: {
            id_schema_json: id_surveySection_json,
            schema_json:  surveySections_json,
            schema_ids_json: surveySection_ids_json,
            schema_ids_json_example : !include examples/surveySection_ids_json_example.json,
            schema_json_example: !include examples/surveySections_json_example.json,
            id_schema_json_example: !include examples/id_surveySection_json_example.json
        }
      }
      /{sectionid}:
        uriParameters:
          sectionid:
            displayName: SurveySections Identifier
            type: string
            example: ADBC1111211111114111111111D1111V
        type:
          member:
            schema_json:  surveySections_json
            schema_id_json: surveySections_id_json
            schema_id_json_example : !include examples/surveySections_id_json_example.json
            schema_json_example: !include examples/surveySections_json_example.json
        /questions:
          post:
            description:  |
                    Add question to a survey section.
            body:
              example: !include examples/section_question.json
              schema: section_question
            responses:
              200:
               description: Question added to survey
              400:
                description: Bad Request – The request was invalid or cannot be served.
              401:
                description: Unauthorized – The request requires user authentication.
              403:
                description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
              404:
                description: Not found – There is no resource behind the URI.
              422:
                description: Unprocessable Entity - Request body is incorrect.
              500:
                description: 500 – Internal Server Error.
          get:
            description: |
                  Read all the question of selected survey section.
            responses:
              200:
                description: OK – Everything is working.
                body:
                  application/json:
                    schema: questions_ids_json
                    example: !include examples/questions_ids_json_example.json
              400:
                description: Bad Request – The request was invalid or cannot be served.
              403:
                description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
              404:
                description: Not found – There is no resource behind the URI.
              500:
                description: 500 – Internal Server Error
          /{questionid}:
            delete:
              description: Deletes a specific question from specified by section.
              responses:
                204:
                  description: OK – The resource was successfully deleted.
                400:
                  description: Bad Request – The request was invalid or cannot be served.
                401:
                  description: Unauthorized – The request requires user authentication.
                403:
                  description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
                404:
                  description: Not found – There is no resource behind the URI.
                500:
                  description: Internal Server Error.

/clients:
  /{clientid}:
    /surveys:
      /{surveyid}:
        /responses:
          type: {
              collection: {
                  id_schema_json: id_response_json,
                  schema_json:  response_json,
                  schema_ids_json: response_ids_json,
                  schema_ids_json_example : !include examples/response_ids_json_example.json,
                  schema_json_example: !include examples/response_json_example.json,
                  id_schema_json_example: !include examples/id_response_json_example.json
              }
          }
          /{responseid}:
            uriParameters:
              responseid:
                displayName: Response Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            type:
              member:
                schema_json:  response_id_json
                schema_id_json: response_id_json
                schema_id_json_example : !include examples/response_id_json_example.json
                schema_json_example: !include examples/response_id_json_example.json
        /sections:
          /{sectionid}:
            /scores:
              post:
                description: To insert sctore for a section
                body:
                  example: |
                              {
                                 "sectionScore":{
                                   "sectionScore":30
                                 }
                              }
                  schema: |
                             {
                              "$schema": "http://json-schema.org/draft-04/schema#",
                              "type": "object",
                              "properties": {
                                "sectionScore": {
                                  "type": "object",
                                  "properties": {
                                    "sectionScore": {
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "sectionScore"
                                  ]
                                }
                              },
                              "required": [
                                "sectionScore"
                              ]
                              }
                responses:
                    200:
                      body:
                        example: !include examples/section_score_example.json
                        schema : section_score

              get:
                description: Read a section score.
                responses:
                  200:
                    body:
                      example: !include examples/section_score_example.json
                      schema : section_score
              put:
                description: Recalcute the score specified section
              delete:
                description: Delete score of a specfied section
        /scores:
          get:
            description: Read a section score.
            responses:
              200:
                body:
                  example: !include examples/score_ids_json_example.json
                  schema : score_ids_json
          put:
            description: Recalcute the score specified section
          delete:
            description: Delete score of a specfied section
        /submissions:
          /{submissionid}:
          put:
            description: |
                             To update responses data of submission
            body:
             application/json:
               example:
                      !include examples/response_json_example.json
            responses:
              200:
                body:
              404:
                body:
                 application/json:
                  example: |
                            {
                              "errors": [
                                {
                                  "code": "SUBMISSION_DETAILS_NOT_FOUND",
                                  "message": "Submission Details not found : e9a4a447-833f-4c29-a3b6-f966a0a753aa"
                                }
                              ]
                            }

          get:
            description:  |
                    To get responses of a submission.
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/response_ids_json_example.json
              404:
                body:
                  application/json:
                    example: |
                                  {
                                    "errors":[
                                    {
                                       "code":"SUBMISSION_DETAILS_NOT_FOUND",
                                       "message":"Submission Details not found : e9a4a447-833f-4c29-a3b6-f966a0a753aa"
                                    }
                                    ]
                                  }
          delete:
            description:  |
                    To get responses of a submission.
            responses:
              200:
                body:
              404:
                body:
                  application/json:
                    example: |
                                  {
                                    "errors":[
                                    {
                                       "code":"SUBMISSION_DETAILS_NOT_FOUND",
                                       "message":"Submission Details not found : e9a4a447-833f-4c29-a3b6-f966a0a753aa"
                                    }
                                    ]
                                  }
/v2/clients/{clientid}/surveys/{surveyid}/responses:
  get:
    description: Get a client consent details
    responses:
      200:
        body:
          application/json:
            example: |
                      {
                         "responses":{
                            "pagination":{
                               "from":0,
                               "returned":1,
                               "total":1,
                               "maximum":30,
                               "sort":{
                               }
                            },
                            "responses":[
                               {
                               "responseId":"ac2e30fc-643d-460f-b36a-5e59ad4d48c7",
                                  "responseText":"example response",
                                  "questionScore":0,
                                  "appId":"app1",
                                  "sectionId":"b57f0656-5292-44fb-85a6-8c3f08b742cb",
                                  "questionId":"a1c80894-3606-4cfa-88df-99882b2b1880",
                                  "clientId":"e9063469-bea6-4960-9051-942baf1dc4ed",
                                  "surveyId":"c12c25d7-4544-4329-a19f-8914544c4964",
                                  "refused":true,
                                  "submissionId":"ccdbf083-acb5-4931-8a01-69b2f42e706d",
                                  "client":{
                                     "id":"e9063469-bea6-4960-9051-942baf1dc4ed",
                                     "firstName":"Ryan",
                                     "middleName":"",
                                     "lastName":"Peterson",
                                     "dob":339989400000
                                  }
                               }
                            ]
                         }
                      }
            schema:  |
                      {
                         "$schema":"http://json-schema.org/draft-04/schema#",
                         "type":"object",
                         "properties":{
                            "responses":{
                               "type":"object",
                               "properties":{
                                  "pagination":{
                                     "type":"object",
                                     "properties":{
                                        "from":{
                                           "type":"integer"
                                        },
                                        "returned":{
                                           "type":"integer"
                                        },
                                        "total":{
                                           "type":"integer"
                                        },
                                        "maximum":{
                                           "type":"integer"
                                        },
                                        "sort":{
                                           "type":"object",
                                           "properties":{
                                           }
                                        }
                                     },
                                     "required":[
                                        "from",
                                        "returned",
                                        "total",
                                        "maximum",
                                        "sort"
                                     ]
                                  },
                                  "responses":{
                                     "type":"array",
                                     "items":{
                                        "type":"object",
                                        "properties":{
                                           "responseId":{
                                              "type":"string"
                                           },
                                           "responseText":{
                                              "type":"string"
                                           },
                                           "questionScore":{
                                              "type":"integer"
                                           },
                                           "effectiveDate":{
                                              "type":"string"
                                           },
                                           "sectionId":{
                                              "type":"string"
                                           },
                                           "questionId":{
                                              "type":"string"
                                           },
                                           "clientId":{
                                              "type":"string"
                                           },
                                           "surveyId":{
                                              "type":"string"
                                           },
                                           "client":{
                                              "type":"object",
                                              "properties":{
                                                 "id":{
                                                    "type":"string"
                                                 },
                                                 "firstName":{
                                                    "type":"string"
                                                 },
                                                 "middleName":{
                                                    "type":"string"
                                                 },
                                                 "lastName":{
                                                    "type":"string"
                                                 },
                                                 "dob":{
                                                    "type":"number"
                                                 }
                                              }
                                           }
                                        },
                                        "required":[
                                           "responseId",
                                           "responseText",
                                           "questionScore"
                                        ]
                                     }
                                  }
                               },
                               "required":[
                                  "pagination",
                                  "responses"
                               ]
                            }
                         },
                         "required":[
                            "responses"
                         ]
                      }
      404:
        body:
          application/json:
            example: |
                        {
                          "errors": [
                            {
                              "code": "CLIENT_NOT_FOUND",
                              "message": "Client not found : e9a4a447-833f-4c29-a3b6-f966a0a753aa"
                            }
                          ]
                        }
            schema: |
                      {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "type": "object",
                        "properties": {
                          "errors": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                },
                                "message": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "code",
                                "message"
                              ]
                            }
                          }
                        },
                        "required": [
                          "errors"
                        ]
                      }
/v2/clients/{clientid}/surveys/{surveyid}/responses/{responseid}:
  get:
    responses:
      200:
        body:
          application/json:
            example: |
                      {
                         "response":{
                            "responseId":"e9a4a447-833f-4c29-a3b6-f966a0a753aa",
                            "responseText":"csacsc",
                            "questionScore":123456,
                            "effectiveDate":"10-02-2017 03:12:00.000",
                            "submissionId":"e9a4a447-833f-4c29-a3b6-f966a0a753aa",
                            "sectionId":"b57f0656-5292-44fb-85a6-8c3f08b742cb",
                            "questionId":"a1c80894-3606-4cfa-88df-99882b2b1880",
                            "clientId":"e9063469-bea6-4960-9051-942baf1dc4ed",
                            "surveyId":"c12c25d7-4544-4329-a19f-8914544c4964",
                            "client":{
                                     "id":"e9a4a447-833f-4c29-a3b6-f966a0a753aa",
                                     "firstName":"Ryan",
                                     "middleName":"",
                                     "lastName":"Peterson",
                                     "dob":339989400000
                                  }
                         }
                      }
            schema: |
                      {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "type": "object",
                        "properties": {
                          "response": {
                            "type": "object",
                            "properties": {
                              "responseId": {
                                "type": "string"
                              },
                              "responseText": {
                                "type": "string"
                              },
                              "questionScore": {
                                "type": "integer"
                              },
                              "effectiveDate" :{
                                "type":"string"
                              },
                              "client":{
                                    "type":"object",
                                    "properties":{
                                    "id":{
                                    "type":"string"
                                      },
                                       "firstName":{
                                          "type":"string"
                                       },
                                       "middleName":{
                                          "type":"string"
                                       },
                                       "lastName":{
                                          "type":"string"
                                       },
                                       "dob":{
                                          "type":"number"
                                       }
                                    }
                                 }
                            },
                            "required": [
                              "responseId",
                              "responseText",
                              "questionScore"
                            ]
                          }
                        },
                        "required": [
                          "response"
                        ]
                      }
      404:
        body:
          application/json:
            example: |
                        {
                          "errors": [
                            {
                              "code": "CLIENT_NOT_FOUND",
                              "message": "Client not found : e9a4a447-833f-4c29-a3b6-f966a0a753aa"
                            }
                          ]
                        }
            schema: |
                      {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "type": "object",
                        "properties": {
                          "errors": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                },
                                "message": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "code",
                                "message"
                              ]
                            }
                          }
                        },
                        "required": [
                          "errors"
                        ]
                      }
/v2/surveys:
  description: |
          Allowed values for tag value are SINGLE_ADULT,FAMILY,YOUTH,HUD
  type: {
    collection: {
        id_schema_json: id_surveys_json_v2,
        schema_json:  surveys_json_v2,
        schema_ids_json: surveys_ids_json_v2,
        schema_ids_json_example : !include examples/surveys_ids_json_example_v2.json,
        schema_json_example: !include examples/surveys_json_example_v2.json,
        id_schema_json_example: !include examples/id_surveys_json_example_v2.json
    }
  }
  /{surveyid}:
    uriParameters:
      surveyid:
        displayName: Surveys Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  surveys_json_v2
        schema_id_json: surveys_id_json_v2
        schema_id_json_example : !include examples/surveys_id_json_example_v2.json
        schema_json_example: !include examples/surveys_json_example_v2.json
