#%RAML 1.0
title:  Survey Service
version: 2.0.1
baseUri: https://www.hmislynk.com/survey-api/rest/v2
mediaType: application/json
protocols:
  - HTTPS
securedBy: [oauth_2_0]
securitySchemes:
  oauth_2_0: !include security-schemes/oauth_2_0.raml
types:
  pickListGroup_id_json: !include schemas/pickListGroup_id_json.json
  pickListGroup_ids_json: !include schemas/pickListGroup_ids_json.json
  pickListGroup_json: !include schemas/pickListGroup_json.json
  id_pickListGroup_json: !include schemas/id_pickListGroup_json.json
  pickListValues_id_json: !include schemas/pickListValues_id_json.json
  pickListValues_ids_json: !include schemas/pickListValues_ids_json.json
  pickListValues_json: !include schemas/pickListValues_json.json
  id_pickListValues_json: !include schemas/id_pickListValues_json.json
  questionGroups_id_json: !include schemas/questionGroups_id_json.json
  questionGroup_ids_json: !include schemas/questionGroup_ids_json.json
  questionGroups_json: !include schemas/questionGroups_json.json
  id_questionGroups_json: !include schemas/id_questionGroups_json.json
  questions_id_json_v2: !include schemas/questions_id_json_v2.json
  questions_ids_json_v2: !include schemas/questions_ids_json_v2.json
  questions_json_v2: !include schemas/questions_json_v2.json
  surveySections_json: !include schemas/surveySections_json.json
  id_questions_json_v2: !include schemas/id_questions_json_v2.json
  response_id_json: !include schemas/response_id_json.json
  response_ids_json: !include schemas/response_ids_json.json
  response_json: !include schemas/response_json.json
  id_response_json: !include schemas/id_response_json.json
  surveys_id_json: !include schemas/surveys_id_json.json
  surveys_ids_json: !include schemas/surveys_ids_json.json
  surveys_json: !include schemas/surveys_json.json
  id_surveys_json: !include schemas/id_surveys_json.json
  surveys_id_json_v2: !include schemas/surveys_id_json_v2.json
  surveys_ids_json_v2: !include schemas/surveys_ids_json_v2.json
  surveys_json_v2: !include schemas/surveys_json_v2.json
  id_surveys_json_v2: !include schemas/id_surveys_json_v2.json
  surveySections_id_json: !include schemas/surveySections_id_json.json
  surveySection_ids_json: !include schemas/surveySection_ids_json.json
  id_surveySection_json: !include schemas/id_surveySection_json.json
  score_ids_json: !include schemas/score_ids_json.json
  section_question: !include schemas/section_question.json
  section_score : !include schemas/section_score.json

resourceTypes:
  collection:
    description: "Operations performed on the set of all HMIS <<resourcePathName>> within the system, and for adding a new <<resourcePathName|!singularize>> to the set of <<resourcePathName>> "
    get:
      description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
      responses:
        200:
          description: OK – Everything is working.
          body:
            application/json:
              schema: <<schema_ids_json>>
              example: <<schema_ids_json_example>>
        400:
          description: Bad Request – The request was invalid or cannot be served.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: 500 – Internal Server Error
    post:
      description: |
        Add a <<resourcePathName|!singularize>>
      body:
        application/json:
          schema: <<schema_json>>
          example: <<schema_json_example>>
      responses:
        201:
          description: OK - New resource has been created.
          body:
            application/json:
              schema: <<id_schema_json>>
              example: <<id_schema_json_example>>
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        422:
          description: Unprocessable Entity - Request body is incorrect.
        500:
          description: 500 – Internal Server Error.
  member:
    get:
      description: Gets a <<resourcePathName|!singularize>> using a URI resource parameter/ID.
      responses:
        200:
          description: OK – Everything is working.
          body:
            application/json:
              schema: <<schema_id_json>>
              example: <<schema_id_json_example>>
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires an user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: Internal Server Error
    put:
      description: Updates a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
      body:
        application/json:
          schema: <<schema_json>>
          example: <<schema_json_example>>
      responses:
        200:
          description: OK – Everything is working.
        304:
          description: Not Modified – The client can use cached data.
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires a user.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: Internal Server Error.
    delete:
      description: Deletes a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
      responses:
        204:
          description: OK – The resource was successfully deleted.
        400:
          description: Bad Request – The request was invalid or cannot be served.
        401:
          description: Unauthorized – The request requires user authentication.
        403:
          description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
        404:
          description: Not found – There is no resource behind the URI.
        500:
          description: Internal Server Error
/questiongroups/{questiongroupid}/questions:
 get:
    description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
    responses:
      200:
        description: OK – Everything is working.
        body:
          application/json:
            schema: questions_ids_json_v2
            example: !include examples/questions_ids_json_example_v2.json
      400:
        description: Bad Request – The request was invalid or cannot be served.
      403:
        description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
      404:
        description: Not found – There is no resource behind the URI.
      500:
        description: 500 – Internal Server Error
 post:
    description: |
         The following operators can be used for "correctValueForAssessment" field.
          1) Relational operators – equal (==, eq), not equal (!=, ne), less than (<, lt), less than or equal (<= , le), greater than (>, gt), and greater than or equal (>=, ge).
          2) Logical operators – and, or, and not (!).
          Question Data Type indicates the data type of the question and currently the following data types are allowed
          Allowed values for questionDataType : NUMBER , STRING , BOOLEAN
          Question Type indicates the type of UI control that is to be presented to the end us.
          Allowed values for questionType: TEXT, CHECKBOX, DROPDOWN , RADIOBUTTON
          For questions of type RADIOBUTTON , CHECKBOX and DROPDOWN pickListGroupId is required  (example: "pickListGroupId": "37766271-7cb8-4c0b-9210-07dc7f82b871")
    body:
      application/json:
        schema: questions_json_v2
        example: !include examples/questions_json_example_v2.json
    responses:
      201:
        description: OK - New resource has been created.
        body:
          application/json:
            schema: id_questions_json_v2
            example: !include examples/id_questions_json_example_v2.json
      400:
        description: Bad Request – The request was invalid or cannot be served.
      401:
        description: Unauthorized – The request requires user authentication.
      403:
        description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
      404:
        description: Not found – There is no resource behind the URI.
      422:
        description: Unprocessable Entity - Request body is incorrect.
      500:
        description: 500 – Internal Server Error.
/questiongroups/{questiongroupid}/questions/{questionid}:
        uriParameters:
          questionid:
            displayName: Questions Identifier
            type: string
            example: ADBC1111211111114111111111D1111V
        type:
          member:
            schema_json:  questions_json_v2
            schema_id_json: questions_id_json_v2
            schema_id_json_example : !include examples/questions_id_json_example_v2.json
            schema_json_example: !include examples/questions_json_example_v2.json

/surveys:
  description: |
          Allowed values for tag value are SINGLE_ADULT,FAMILY,YOUTH,HUD
  type: {
    collection: {
        id_schema_json: id_surveys_json_v2,
        schema_json:  surveys_json_v2,
        schema_ids_json: surveys_ids_json_v2,
        schema_ids_json_example : !include examples/surveys_ids_json_example_v2.json,
        schema_json_example: !include examples/surveys_json_example_v2.json,
        id_schema_json_example: !include examples/id_surveys_json_example_v2.json
    }
  }
  /{surveyid}:
    uriParameters:
      surveyid:
        displayName: Surveys Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  surveys_json_v2
        schema_id_json: surveys_id_json_v2
        schema_id_json_example : !include examples/surveys_id_json_example_v2.json
        schema_json_example: !include examples/surveys_json_example_v2.json
